USE [CAPINVREPOSITORY]
GO
IF ( OBJECT_ID('DBO.USP_CAPINV_CALC_REMAINING_CAPACITY', 'P') IS NOT NULL ) 
   DROP PROCEDURE DBO.USP_CAPINV_CALC_REMAINING_CAPACITY
GO

CREATE PROCEDURE [DBO].USP_CAPINV_CALC_REMAINING_CAPACITY
/****************************************************************************************************
* COPYRIGHT REVENUE ANALYTICS 2017
* ALL RIGHTS RESERVED
*
* CREATED BY: DATA ENGINEERING
* FILENAME:   USP_CAPFCST_CALC_FREESALECONSUMPTION.SQL
* DATE:       04/07/2017
*
* APPLICATION:  CALCULATES REMAINING FREESALE
*               
* PARAMETERS:   @V_RUNDATE = DATE OF THE RUN
*				@V_PARENT_PROCESS_ID == PARENT OR CALLING PROCESS ID
*				@V_ERROR_CODE		== RETURNED ERROR CODE
*  				
* ASSUMPTIONS: ROCKS, COMS, DISPLACEMENT, COMMITMENT AND CONSUMPTION TABLES REFRESH
* 
* INPUTS:		ANALYTICSDATAMART.DBO.AD_ROCKS
*				ANALYTICSDATAMART.DBO.ROUTELEGS_SCHEDULE
*				ANALYTICSDATAMART.DBO.ML_ALLOCATIONS
*				ANALYTICSDATAMART.DBO.AD_DISPLACEMENT_OOG
* OUTPUTS:		CAPINVREPOSITORY.DBO.AD_CAPFCST_FREESALE_UBOAT
*				
* EXAMPLE CALL: DECLARE	@RETURN_VALUE INT,
*						@V_ERROR_CODE INT
*
*				EXEC	@RETURN_VALUE = CAPINVREPOSITORY.[DBO].[USP_CAPINV_CALC_REMAINING_CAPACITY]
*						@V_RUNDATE = '2017-04-01',
						@V_PARENT_PROCESS_ID = 0,
						@V_PUBLISHRUN = 1,
*						@V_ERROR_CODE = @V_ERROR_CODE OUTPUT
*****************************************************************************************************
* NOTES:
*  NAME					CREATED        LAST MOD			COMMENTS
*  DE\ELM               4/17/2017						PROCEDURE CREATED
****************************************************************************************************/
	 @V_RUNDATE DATE
	,@V_PARENT_PROCESS_ID INT
	,@V_PUBLISHRUN INT = 1
	,@V_ERROR_CODE INT OUTPUT
AS
BEGIN
	SET NOCOUNT ON 
	--DECLARE VARIABLES
	DECLARE @V_ERRORMESSAGE NVARCHAR(4000)  
	DECLARE @V_MSG  NVARCHAR(4000)
	DECLARE @V_NOTE  NVARCHAR(4000)
	DECLARE @V_ERRORSEVERITY INT  

	DECLARE @V_PROCESS_ID INT = NEXT VALUE FOR DBO.SEQ_LOG_PROCESS_ID
	DECLARE @V_PROCESS_NAME VARCHAR(255) = OBJECT_SCHEMA_NAME(@@PROCID) + '.' + OBJECT_NAME(@@PROCID)
	DECLARE @V_FIANLERROR INT
	DECLARE @V_SYSTEM_USER NVARCHAR(255) = SYSTEM_USER
	DECLARE @V_SYSTEMTIME DATETIME = GETUTCDATE()
	DECLARE @V_RECORD_CNT INT

	DECLARE @V_STEP_ID TINYINT
	DECLARE @V_STEP_NAME VARCHAR(255)
	DECLARE @V_AUDITVERSIONID INT
	
	--ASSIGN TODAYS DATE IF RUNDATE IS NULL
	SET @V_RUNDATE = CAST(COALESCE(@V_RUNDATE, GETUTCDATE()) AS DATE)
	SET @V_PARENT_PROCESS_ID = COALESCE(@V_PARENT_PROCESS_ID,0)
	DECLARE @V_LOOKBACK_DAYS INT = (SELECT CAST(PARAMVALUE AS INT) FROM ANALYTICSDATAMART.[DBO].[CAPINVUDF_APP_PARAMETER] WHERE UPPER(PARAMNAME) = 'LOOKBACK_DAYS' AND PROCESSNAME = 'CAPINV')
	DECLARE @V_FFE_TEU_MULTIPLIER NUMERIC(10,1) = (SELECT CAST(PARAMVALUE AS INT) FROM ANALYTICSDATAMART.[DBO].[CAPINVUDF_APP_PARAMETER] WHERE UPPER(PARAMNAME) = 'FFE_TO_TEU_MULTIPLIER' AND PROCESSNAME = 'CAPINV')
	DECLARE @V_KG_TO_TONS NUMERIC(10,1) = (SELECT CAST(PARAMVALUE AS NUMERIC(10,1)) FROM ANALYTICSDATAMART.[DBO].[CAPINVUDF_APP_PARAMETER] WHERE UPPER(PARAMNAME) = 'KG_TO_TONS' AND PROCESSNAME = 'CAPINV')
	DECLARE @V_OVERBOOB_MIN NUMERIC(10,1) = (SELECT CAST(PARAMVALUE AS NUMERIC(10,1)) FROM ANALYTICSDATAMART.[DBO].[CAPINVUDF_APP_PARAMETER] WHERE UPPER(PARAMNAME) = 'OVERBOOB_MIN' AND PROCESSNAME = 'CAPINV')

	DECLARE @V_RUNID INT --= (select RUNID from ANALYTICSDATAMART.[DBO].runidmaster where rundate = @V_RUNDATE)
	DECLARE @V_LOOKFORWARD_DAYS INT = (SELECT CAST(PARAMVALUE AS INT) FROM ANALYTICSDATAMART.[DBO].[CAPINVUDF_APP_PARAMETER] WHERE UPPER(PARAMNAME) = 'LOOKFORWARD_DAYS' AND PROCESSNAME = 'CAPINV')
	DECLARE @V_PROCESSMASTER INT = (SELECT CAST(PARAMVALUE AS INT) FROM ANALYTICSDATAMART.[DBO].[CAPINVUDF_APP_PARAMETER] WHERE UPPER(PARAMNAME) = 'CAPPROCESSMASTER' AND PROCESSNAME = 'CAPINV')
	DECLARE @V_OTB_MAT_PROB_THRESHOLD NUMERIC(5,4) = (SELECT CAST(PARAMVALUE AS NUMERIC(5,4)) FROM ANALYTICSDATAMART.[DBO].[CAPINVUDF_APP_PARAMETER] WHERE UPPER(PARAMNAME) = 'OTB_MAT_PROB_THRESHOLD' AND PROCESSNAME = 'CAPINV')

	--Get Runid
	EXEC analyticsdatamart.[dbo].[generateRunID] @V_PROCESSMASTER,@V_RUNDATE, @V_RUNID OUTPUT
	BEGIN TRY
		--LOG PROCESS		
		EXEC DBO.USP_LOG_PROCESS @V_PROCESS_ID = @V_PROCESS_ID
							, @V_PROCESS_NAME = @V_PROCESS_NAME
							, @V_USER_NAME = @V_SYSTEM_USER
							, @V_START_DT = @V_SYSTEMTIME
							, @V_END_DT = NULL
							, @V_STATUS = 'RUNNING'
							, @V_ACTION = 1
							, @V_PARENT_PROCESS_ID = @V_PARENT_PROCESS_ID
							, @V_NOTE = 'PROCESS TO CALCULATE FREESALE CONSUMPTION'
							, @V_START_STEP = 1;

		SET @V_STEP_ID = 10
		SET @V_STEP_NAME = 'BUILD HISTORICAL STRING TO ROUTE CODE MAP'
		SET @V_NOTE = 'USING HISTORICAL BOOKING, TO BUILD MAPPING BETWEEN ROUTE_CD AND STRING_ID_X'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = @V_SYSTEMTIME
  					, @V_END_DT = NULL
  					, @V_STATUS = 'RUNNING'
  					, @V_ROWS_PROCESSED = NULL
  					, @V_ACTION = 1
  					, @V_NOTE = @V_NOTE;

			/******************************************************
					BUILD HISTORICAL DISTRIBUTION TABLE
			*******************************************************/
			IF OBJECT_ID('CAPINVREPOSITORY.DBO.TMP_ISC_LIST_AVG', 'U') IS NOT NULL
				DROP TABLE CAPINVREPOSITORY.DBO.TMP_ISC_LIST_AVG;

			SELECT      L.SERVICECODE
						,L.SERVICECODEDIRECTION
						,L.STRING_ID_X
						,L.ROUTE_CD
						,CAST(COALESCE(LD.ISC,'LEAD') AS VARCHAR(8)) AS ISC
						,SUM(TEU) AS TOTALTEU
			INTO CAPINVREPOSITORY.DBO.TMP_ISC_LIST_AVG
			FROM ANALYTICSDATAMART.DBO.CAPFCST_AD_CONSUMPTION L 
			LEFT JOIN ( 
						SELECT DISTINCT SERVICECODE,SERVICECODEDIRECTION,LEAD_ROUTE AS ROUTE_CD,ISC
						FROM ANALYTICSDATAMART.DBO.DIM_LEAD_ROUTE
						UNION 
						SELECT DISTINCT SERVICECODE,SERVICECODEDIRECTION,CHILD_ROUTE, ISC
						FROM ANALYTICSDATAMART.DBO.DIM_LEAD_ROUTE
						)LD
			ON L.SERVICECODE = LD.SERVICECODE
			AND L.SERVICECODEDIRECTION = LD.SERVICECODEDIRECTION
			AND L.ROUTE_CD = LD.ROUTE_CD
			WHERE L.ROUTE_CD IS NOT NULL AND L.ROUTE_CD <> ''
			--AND L.DEPARTUREDATE BETWEEN DATEADD(DAY, -@V_LOOKBACK_DAYS, @V_RUNDATE) AND DATEADD(DAY, @V_LOOKFORWARD_DAYS,@V_RUNDATE)
			GROUP BY L.SERVICECODE
						,L.SERVICECODEDIRECTION
						,L.STRING_ID_X
						,L.ROUTE_CD
						,CAST(COALESCE(LD.ISC,'LEAD') AS VARCHAR(8))
			OPTION (MAXDOP 8);

		SET @V_RECORD_CNT = @@ROWCOUNT
		SET @V_SYSTEMTIME = GETUTCDATE()
			
		--UPDATE DETAIL 
		SET @V_NOTE = @V_STEP_NAME + ' COMPLETED SUCCESSFULLY'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = NULL
  					, @V_END_DT = @V_SYSTEMTIME
  					, @V_STATUS = 'COMPLETED'
  					, @V_ROWS_PROCESSED = @V_RECORD_CNT
  					, @V_ACTION = 2
  					, @V_NOTE = @V_NOTE;

			CREATE CLUSTERED INDEX CDX_DATA_2 ON DBO.TMP_ISC_LIST_AVG(SERVICECODE,ROUTE_CD,STRING_ID_X)

			/******************************************************
					GET ONE TO ONE STRING TO ROUTE_CD
			*******************************************************/
			SET @V_STEP_ID = 20
			SET @V_STEP_NAME = 'GET RECORDS WITH 1 TO 1 MAPPING BETWEEN STRING CODE AND ROUTE CODE'
			SET @V_NOTE = 'GET RECORDS WITH 1 TO 1 MAPPING BETWEEN STRING CODE AND ROUTE CODE'
			EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  						, @V_STEP_ID = @V_STEP_ID
  						, @V_STEP_NAME = @V_STEP_NAME
  						, @V_START_DT = @V_SYSTEMTIME
  						, @V_END_DT = NULL
  						, @V_STATUS = 'RUNNING'
  						, @V_ROWS_PROCESSED = NULL
  						, @V_ACTION = 1
  						, @V_NOTE = @V_NOTE;

		IF OBJECT_ID('CAPINVREPOSITORY.DBO.TMP_ISC_LIST_SING', 'U') IS NOT NULL
			DROP TABLE CAPINVREPOSITORY.DBO.TMP_ISC_LIST_SING;

		WITH DUP1_1 AS
		(
			SELECT SERVICECODE,SERVICECODEDIRECTION,STRING_ID_X
			FROM CAPINVREPOSITORY.DBO.TMP_ISC_LIST_AVG
			GROUP BY SERVICECODE,SERVICECODEDIRECTION,STRING_ID_X
			HAVING COUNT(DISTINCT ROUTE_CD) = 1
		)
		SELECT distinct L.SERVICECODE
				,L.SERVICECODEDIRECTION
				,L.STRING_ID_X
				,L.ROUTE_CD
				,L.TOTALTEU
				,ISC
				,CAST('1 TO 1' AS VARCHAR(75)) AS ISCREASON
				,CAST(1.0 AS NUMERIC(10,4)) AS TEU_DIST
		INTO CAPINVREPOSITORY.DBO.TMP_ISC_LIST_SING
		FROM CAPINVREPOSITORY.DBO.TMP_ISC_LIST_AVG L
		INNER JOIN DUP1_1 GG
		ON L.SERVICECODE = GG.SERVICECODE
		AND L.SERVICECODEDIRECTION = GG.SERVICECODEDIRECTION
		AND L.STRING_ID_X = GG.STRING_ID_X;

		SET @V_RECORD_CNT = @@ROWCOUNT
		SET @V_SYSTEMTIME = GETUTCDATE()
			
		--UPDATE DETAIL 
		SET @V_NOTE = @V_STEP_NAME + ' COMPLETED SUCCESSFULLY'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = NULL
  					, @V_END_DT = @V_SYSTEMTIME
  					, @V_STATUS = 'COMPLETED'
  					, @V_ROWS_PROCESSED = @V_RECORD_CNT
  					, @V_ACTION = 2
  					, @V_NOTE = @V_NOTE;

			/******************************************************
					MATCH MULTIPLE ROUTE CODE TO STEERING TABLE
					IF NO MATCHING STEERED ISC, ISC IS PASSIVE 
					AND ALLOCATED TO LEAD ROUTE
			*******************************************************/
			SET @V_STEP_ID = 30
			SET @V_STEP_NAME = 'GET RECORDS WITH MANY TO 1 MAP BETWEEN STRING CODE AND ROUTE CODE'
			SET @V_NOTE = 'GET RECORDS WITH MANY TO 1 MAP BETWEEN STRING CODE AND ROUTE CODE'
			EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  						, @V_STEP_ID = @V_STEP_ID
  						, @V_STEP_NAME = @V_STEP_NAME
  						, @V_START_DT = @V_SYSTEMTIME
  						, @V_END_DT = NULL
  						, @V_STATUS = 'RUNNING'
  						, @V_ROWS_PROCESSED = NULL
  						, @V_ACTION = 1
  						, @V_NOTE = @V_NOTE;

			IF OBJECT_ID('CAPINVREPOSITORY.DBO.TMP_ISC_LIST_FIX_MNT', 'U') IS NOT NULL
				DROP TABLE CAPINVREPOSITORY.DBO.TMP_ISC_LIST_FIX_MNT;

			WITH T1 AS
			(
				SELECT SERVICECODE,SERVICECODEDIRECTION,STRING_ID_X, SUM(TOTALTEU) AS TOTALTEU
				FROM CAPINVREPOSITORY.DBO.TMP_ISC_LIST_AVG
				GROUP BY SERVICECODE,SERVICECODEDIRECTION,STRING_ID_X
				HAVING COUNT(DISTINCT ROUTE_CD) > 1
			)
			SELECT distinct L.SERVICECODE
					,L.SERVICECODEDIRECTION
					,L.STRING_ID_X
					,L.ROUTE_CD
					,L.TOTALTEU
					,GG.TOTALTEU AS DED_TOTALTEU
					,L.TOTALTEU / GG.TOTALTEU AS TEU_DIST
					,ISC
					,CAST('1 STRING MULTIPLE ROUTE' AS VARCHAR(75)) AS ISCREASON
			INTO CAPINVREPOSITORY.DBO.TMP_ISC_LIST_FIX_MNT
			FROM CAPINVREPOSITORY.DBO.TMP_ISC_LIST_AVG L
			INNER JOIN T1 GG
			ON L.SERVICECODE = GG.SERVICECODE
			AND L.SERVICECODEDIRECTION = GG.SERVICECODEDIRECTION
			AND L.STRING_ID_X = GG.STRING_ID_X;

		SET @V_RECORD_CNT = @@ROWCOUNT
		SET @V_SYSTEMTIME = GETUTCDATE()
			
		--UPDATE DETAIL 
		SET @V_NOTE = @V_STEP_NAME + ' COMPLETED SUCCESSFULLY'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = NULL
  					, @V_END_DT = @V_SYSTEMTIME
  					, @V_STATUS = 'COMPLETED'
  					, @V_ROWS_PROCESSED = @V_RECORD_CNT
  					, @V_ACTION = 2
  					, @V_NOTE = @V_NOTE;

			/******************************************************
						BUILD FINAL STRING TO ROUTE CODE
			*******************************************************/
			SET @V_STEP_ID = 40
			SET @V_STEP_NAME = 'COMBINE STRING TO ROUTE CODE -- 1 TO 1'
			SET @V_NOTE = 'COMBINE STRING TO ROUTE CODE -- 1 TO 1'
			EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  						, @V_STEP_ID = @V_STEP_ID
  						, @V_STEP_NAME = @V_STEP_NAME
  						, @V_START_DT = @V_SYSTEMTIME
  						, @V_END_DT = NULL
  						, @V_STATUS = 'RUNNING'
  						, @V_ROWS_PROCESSED = NULL
  						, @V_ACTION = 1
  						, @V_NOTE = @V_NOTE;

			IF OBJECT_ID('CAPINVREPOSITORY.DBO.TMP_ISC_LIST_ALL', 'U') IS NOT NULL
				DROP TABLE CAPINVREPOSITORY.DBO.TMP_ISC_LIST_ALL;

			SELECT DISTINCT L.SERVICECODE
					,L.SERVICECODEDIRECTION
					,L.STRING_ID_X
					,L.ROUTE_CD
					,L.TEU_DIST
					,L.ISC
					,L.ISCREASON
			INTO CAPINVREPOSITORY.DBO.TMP_ISC_LIST_ALL
			FROM CAPINVREPOSITORY.DBO.TMP_ISC_LIST_SING L;

		SET @V_RECORD_CNT = @@ROWCOUNT
		SET @V_SYSTEMTIME = GETUTCDATE()
			
		--UPDATE DETAIL 
		SET @V_NOTE = @V_STEP_NAME + ' COMPLETED SUCCESSFULLY'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = NULL
  					, @V_END_DT = @V_SYSTEMTIME
  					, @V_STATUS = 'COMPLETED'
  					, @V_ROWS_PROCESSED = @V_RECORD_CNT
  					, @V_ACTION = 2
  					, @V_NOTE = @V_NOTE;

			SET @V_STEP_ID = 50
			SET @V_STEP_NAME = 'COMBINE STRING TO ROUTE CODE -- MANY TO 1'
			SET @V_NOTE = 'COMBINE STRING TO ROUTE CODE -- 1 TO 1'
			EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  						, @V_STEP_ID = @V_STEP_ID
  						, @V_STEP_NAME = @V_STEP_NAME
  						, @V_START_DT = @V_SYSTEMTIME
  						, @V_END_DT = NULL
  						, @V_STATUS = 'RUNNING'
  						, @V_ROWS_PROCESSED = NULL
  						, @V_ACTION = 1
  						, @V_NOTE = @V_NOTE;

		--ADD MULTIPLE STRING CODE TO ROUTE CODE
		INSERT INTO CAPINVREPOSITORY.DBO.TMP_ISC_LIST_ALL
		(
			SERVICECODE
			,SERVICECODEDIRECTION
			,STRING_ID_X
			,ROUTE_CD
			,TEU_DIST
			,ISC
			,ISCREASON
		)
		SELECT DISTINCT L.SERVICECODE
				,L.SERVICECODEDIRECTION
				,L.STRING_ID_X
				,L.ROUTE_CD
				,L.TEU_DIST
				,L.ISC
				,L.ISCREASON
		FROM CAPINVREPOSITORY.DBO.TMP_ISC_LIST_FIX_MNT L
		LEFT JOIN CAPINVREPOSITORY.DBO.TMP_ISC_LIST_ALL GG
		ON L.SERVICECODE = GG.SERVICECODE
		AND L.SERVICECODEDIRECTION = GG.SERVICECODEDIRECTION
		AND L.STRING_ID_X = GG.STRING_ID_X
		WHERE GG.STRING_ID_X IS NULL;

		SET @V_RECORD_CNT = @@ROWCOUNT
		SET @V_SYSTEMTIME = GETUTCDATE()
			
		--UPDATE DETAIL 
		SET @V_NOTE = @V_STEP_NAME + ' COMPLETED SUCCESSFULLY'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = NULL
  					, @V_END_DT = @V_SYSTEMTIME
  					, @V_STATUS = 'COMPLETED'
  					, @V_ROWS_PROCESSED = @V_RECORD_CNT
  					, @V_ACTION = 2
  					, @V_NOTE = @V_NOTE;

		--UPDATE DETAIL 
		SET @V_NOTE = @V_STEP_NAME + ' COMPLETED SUCCESSFULLY'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = NULL
  					, @V_END_DT = @V_SYSTEMTIME
  					, @V_STATUS = 'COMPLETED'
  					, @V_ROWS_PROCESSED = @V_RECORD_CNT
  					, @V_ACTION = 2
  					, @V_NOTE = @V_NOTE;

		/******************************************************
				APPLY HISTORICAL DISTRIBUTION TO DATA
		******************************************************/
		SET @V_STEP_ID = 60
		SET @V_STEP_NAME = 'BUILD LEGS FOR FBR ALLOCATION DATA'
		SET @V_NOTE = 'BUILD LEGS FOR FBR ALLOCATION DATA'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = @V_SYSTEMTIME
  					, @V_END_DT = NULL
  					, @V_STATUS = 'RUNNING'
  					, @V_ROWS_PROCESSED = NULL
  					, @V_ACTION = 1
  					, @V_NOTE = @V_NOTE;

			IF OBJECT_ID('CAPINVREPOSITORY.DBO.TMP_ISC_ALLOCATED', 'U') IS NOT NULL
				DROP TABLE CAPINVREPOSITORY.DBO.TMP_ISC_ALLOCATED;

			SELECT A.WEEKNO,A.VESSELCODE AS VESSEL,A.VOYAGE
					,A.SERVICECODE,A.DEPARTUREPORT
					,A.ARRIVALPORT
					,A.LEGSEQID,A.DEPARTUREDATE, A.ARRIVALDATE
					,A.SERVICECODEDIRECTION,B.ISC
					,SUM(A.TEU * COALESCE(B.TEU_DIST,1)) AS CAL_TEU
					,SUM(A.WEIGHTKG * COALESCE(B.TEU_DIST,1)) AS CAL_WEIGHTKG
					,SUM(A.WEIGHTKG * COALESCE(B.TEU_DIST,1))/1000.0 AS CAL_MTS
					,SUM(A.REEFPLUGS * COALESCE(B.TEU_DIST,1)) AS CAL_REEFPLUGS
			INTO CAPINVREPOSITORY.DBO.TMP_ISC_ALLOCATED
			FROM ANALYTICSDATAMART.DBO.AD_ISC_COMMITED_LEGS A
			INNER JOIN CAPINVREPOSITORY.DBO.TMP_ISC_LIST_ALL B
			ON A.SERVICECODE = B.SERVICECODE
			and a.SERVICECODEDIRECTION = b.servicecodedirection
			AND A.BUYINGSTRING = B.STRING_ID_X
			GROUP BY A.WEEKNO,A.VESSELCODE,A.VOYAGE,A.SERVICECODE,A.DEPARTUREPORT
					,A.ARRIVALPORT
					,A.LEGSEQID,A.DEPARTUREDATE, A.ARRIVALDATE
					,A.SERVICECODEDIRECTION,B.ISC

		--UPDATE DETAIL 
		SET @V_NOTE = @V_STEP_NAME + ' COMPLETED SUCCESSFULLY'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = NULL
  					, @V_END_DT = @V_SYSTEMTIME
  					, @V_STATUS = 'COMPLETED'
  					, @V_ROWS_PROCESSED = @V_RECORD_CNT
  					, @V_ACTION = 2
  					, @V_NOTE = @V_NOTE;

		--UPDATE PROCESS --COMPLETE PROCESS
		SET @V_NOTE = @V_PROCESS_NAME + ' COMPLETED SUCCESSFULLY'
		EXEC DBO.USP_LOG_PROCESS @V_PROCESS_ID = @V_PROCESS_ID
							, @V_PROCESS_NAME = @V_PROCESS_NAME
							, @V_USER_NAME = @V_SYSTEM_USER
							, @V_START_DT = NULL
							, @V_END_DT = @V_SYSTEMTIME
							, @V_STATUS = 'COMPLETED'
							, @V_ACTION = 2
							, @V_PARENT_PROCESS_ID = NULL
							, @V_NOTE = @V_NOTE
							, @V_START_STEP = 1;

		SET @V_STEP_ID = 70
		SET @V_STEP_NAME = 'BUILD FINAL ALLOCATION TABLE'
		SET @V_NOTE = 'BUILD FINAL ALLOCATION TABLE'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = @V_SYSTEMTIME
  					, @V_END_DT = NULL
  					, @V_STATUS = 'RUNNING'
  					, @V_ROWS_PROCESSED = NULL
  					, @V_ACTION = 1
  					, @V_NOTE = @V_NOTE;

		/*****************************************************************
				GET CALCULATED ALLOCATION
		******************************************************************/	
		IF OBJECT_ID('CAPINVREPOSITORY.DBO.TMP_FINAL_ALLOCATION', 'U') IS NOT NULL
		  DROP TABLE CAPINVREPOSITORY.DBO.TMP_FINAL_ALLOCATION

		;WITH DATA_TMP AS 
		(
			SELECT DISTINCT 
				A.VOYAGE	
				,A.VESSELCODE	
				,A.SERVICECODE	
				,NG.SERVICECODEDIRECTION
				,A.VESSELOPERATOR
				,A.DEPARTUREPORT	
				,A.ARRIVALPORT	
				,cast(cast(A.DEPARTUREDATE as varchar) +' '+ a.departuretime as datetime) as DEPARTUREDATE
				,A.INTAKETEU	
				,A.INTAKETONS	
				,A.INTAKEPLUGS	

				, A.ALLOCATIONTEU - COALESCE(B.CAL_TEU,0)  AS  CAL_ALLOCATIONTEU
				, A.ALLOCATIONTONS - COALESCE(B.CAL_MTS,0) AS  CAL_ALLOCATIONTONS
				, A.ALLOCATIONPLUGS - COALESCE(B.CAL_REEFPLUGS,0) AS  CAL_ALLOCATIONPLUGS

				, COALESCE(B.CAL_TEU,0) AS ISC_ALLOCATIONTEU
				, COALESCE(B.CAL_MTS,0) AS ISC_ALLOCATIONTONS
				, COALESCE(B.CAL_REEFPLUGS,0) AS ISC_ALLOCATIONPLUGS
				, CAST('LEAD' AS VARCHAR(8)) AS ISC
			FROM ANALYTICSDATAMART.DBO.AD_ML_ALLOCATIONS A
			INNER JOIN ANALYTICSDATAMART.DBO.DIM_DATE DT
			ON CAST(A.DEPARTUREDATE AS DATE) = CAST(DT.DATE AS DATE)
			LEFT JOIN --GET SERVICECODE DIRECTION FROM GSIS
			(
				SELECT DISTINCT VESSELCODE AS VESSEL, DEPVOYAGE AS VOYAGE,DEPSERVICECODE AS SERVICECODE,SITE_CODE
				, DEPSERVICEDIR AS  SERVICECODEDIRECTION
				FROM ANALYTICSDATAMART.DBO.SCHEDULE
			)NG
			ON A.VESSELCODE = NG.VESSEL
			AND A.VOYAGE = NG.VOYAGE
			AND A.SERVICECODE = NG.SERVICECODE
			and a.DEPARTUREPORT = NG.SITE_CODE
			LEFT JOIN --SUM UP ACTIVE ISC TOTALS TO SUBTRACT FROM THE LEAD ISC 
			(
				SELECT weekno,VESSEL,VOYAGE,SERVICECODE,SERVICECODEDIRECTION,DEPARTUREPORT,ARRIVALPORT
						, SUM(CAL_TEU) AS CAL_TEU
						,SUM(CAL_MTS) AS CAL_MTS
						, SUM(CAL_REEFPLUGS) AS CAL_REEFPLUGS
				FROM CAPINVREPOSITORY.DBO.TMP_ISC_ALLOCATED
				WHERE UPPER(ISC) <> 'LEAD'
				GROUP BY weekno,VESSEL,VOYAGE,SERVICECODE,SERVICECODEDIRECTION,DEPARTUREPORT,ARRIVALPORT
			) B
			ON DT.INT_ISO_YEARWEEK = B.WEEKNO
			AND A.VESSELCODE = B.VESSEL
			AND A.VOYAGE = B.VOYAGE
			AND A.SERVICECODE = B.SERVICECODE
			AND A.DEPARTUREPORT = B.DEPARTUREPORT
			AND A.ARRIVALPORT = B.ARRIVALPORT
			AND NG.SERVICECODEDIRECTION = B.SERVICECODEDIRECTION
			UNION --GET ACTIVE ISCS ALLOCATIONS
			SELECT  
					A.VOYAGE,A.VESSEL,A.SERVICECODE
					,A.SERVICECODEDIRECTION AS SERVICECODEDIRECTION
					,NN.VESSELOPERATOR
					,A.DEPARTUREPORT
					,A.ARRIVALPORT
					,cast(cast(NN.DEPARTUREDATE as varchar) +' '+ NN.departuretime as datetime) as DEPARTUREDATE
					,0 AS INTAKETEU	
					,0 AS INTAKETONS	
					,0 AS INTAKEPLUGS	
					, SUM(CAL_TEU)
					, SUM(CAL_MTS)
					, SUM(CAL_REEFPLUGS)
					, SUM(CAL_TEU)
					, SUM(CAL_MTS)
					, SUM(CAL_REEFPLUGS)
					,ISC
			FROM CAPINVREPOSITORY.DBO.TMP_ISC_ALLOCATED A
			INNER JOIN 
			(
				SELECT DISTINCT VESSELCODE,VOYAGE,SERVICECODE,DEPARTUREPORT,ARRIVALPORT,DEPARTUREDATE,DEPARTURETIME,VESSELOPERATOR
				FROM ANALYTICSDATAMART.DBO.AD_ML_ALLOCATIONS Q
			)NN
			ON A.VESSEL = NN.VESSELCODE
			AND A.VOYAGE = NN.VOYAGE
			AND A.SERVICECODE = NN.SERVICECODE
			AND A.DEPARTUREPORT = NN.DEPARTUREPORT
			AND A.ARRIVALPORT = NN.ARRIVALPORT
			WHERE UPPER(ISC) <> 'LEAD'
			GROUP BY A.VOYAGE,A.VESSEL,A.SERVICECODE
					,A.SERVICECODEDIRECTION 
					,NN.VESSELOPERATOR
					,A.DEPARTUREPORT
					,A.ARRIVALPORT
					,cast(cast(NN.DEPARTUREDATE as varchar) +' '+ NN.departuretime as datetime)
					,ISC
		  )
		  SELECT DISTINCT VOYAGE	
				,VESSELCODE	
				,SERVICECODE	
				,max(servicecodedirection) over (PARTITION BY vesselcode, voyage, servicecode) as SERVICECODEDIRECTION
				,VESSELOPERATOR
				,DEPARTUREPORT	
				,ARRIVALPORT	
				,dense_rank() OVER (PARTITION BY VESSELCODE,VOYAGE,SERVICECODE ORDER BY DEPARTUREDATE) AS LEGSEQID	
				,DEPARTUREDATE	
				,LEAD(DEPARTUREDATE) OVER (PARTITION BY VESSELCODE,VOYAGE,SERVICECODE ORDER BY DEPARTUREDATE) AS ARRIVALDATE
				,INTAKETEU	
				,INTAKETONS	
				,INTAKEPLUGS	
				,CAL_ALLOCATIONTEU
				,CAL_ALLOCATIONTONS
				,CAL_ALLOCATIONPLUGS
				,ISC_ALLOCATIONTEU
				,ISC_ALLOCATIONTONS
				,ISC_ALLOCATIONPLUGS
				,ISC
  			INTO CAPINVREPOSITORY.DBO.TMP_FINAL_ALLOCATION
			FROM DATA_TMP A
			WHERE cast(DEPARTUREDATE as date) BETWEEN DATEADD(DAY, -@V_LOOKBACK_DAYS, @V_RUNDATE) AND DATEADD(DAY, @V_LOOKFORWARD_DAYS,@V_RUNDATE);

		SET @V_RECORD_CNT = @@ROWCOUNT
		SET @V_SYSTEMTIME = GETUTCDATE()
			
		--UPDATE DETAIL 
		SET @V_NOTE = @V_STEP_NAME + ' COMPLETED SUCCESSFULLY'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = NULL
  					, @V_END_DT = @V_SYSTEMTIME
  					, @V_STATUS = 'COMPLETED'
  					, @V_ROWS_PROCESSED = @V_RECORD_CNT
  					, @V_ACTION = 2
  					, @V_NOTE = @V_NOTE;

		SET @V_STEP_ID = 80
		SET @V_STEP_NAME = 'BUILD FINAL ALLOCATION TABLE WITH OVER BOOKING'
		SET @V_NOTE = 'BUILD FINAL ALLOCATION TABLE WITH OVER BOOKING'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = @V_SYSTEMTIME
  					, @V_END_DT = NULL
  					, @V_STATUS = 'RUNNING'
  					, @V_ROWS_PROCESSED = NULL
  					, @V_ACTION = 1
  					, @V_NOTE = @V_NOTE;

				SELECT CARGO_TYPE, CONTAINER_SIZE_X CONTAINER_SIZE
				,case when COUNT(*) = 0.0 then 0.0 else (SUM(CASE WHEN SHIPMENT_STATUS = 'ACTIVE' THEN 1 ELSE 0 END)+0.0)/COUNT(*) end as MATL_PROB
				into #HIST_MATL_PROBS
				FROM ANALYTICSDATAMART.DBO.VW_FREESALEBOOKING
				WHERE SHIPMENT_STATUS IN ('ACTIVE', 'CANCELLED BY CUSTOMER')
				AND ETD < SYSDATETIME()
				GROUP BY CARGO_TYPE, CONTAINER_SIZE_X

				SELECT VESSEL, VOYAGE, SERVICECODE, FROMLEGSITECODE, TOLEGSITECODE, DEPARTUREDATE
					,CARGO_TYPE, CONTAINER_SIZE_X CONTAINER_SIZE
					,SUM(CASE WHEN ETD > SYSDATETIME() THEN TEU ELSE 0 END) FUTURE_TEU
					,SUM(CASE WHEN ETD <= SYSDATETIME() THEN TEU ELSE 0 END) LOADED_TEU
				into #TEU_OTB
				FROM ANALYTICSDATAMART.DBO.CAPFCST_AD_CONSUMPTION
				WHERE ISFREESALE = 1
				GROUP BY VESSEL, VOYAGE, SERVICECODE, FROMLEGSITECODE, TOLEGSITECODE, DEPARTUREDATE,CARGO_TYPE, CONTAINER_SIZE_X

				SELECT A.VESSEL, A.VOYAGE, A.SERVICECODE, A.FROMLEGSITECODE, A.TOLEGSITECODE, A.DEPARTUREDATE
					,A.CARGO_TYPE, A.CONTAINER_SIZE
					,A.FUTURE_TEU, A.LOADED_TEU, B.MATL_PROB
				into #TEU_AND_MATL
				FROM #TEU_OTB A
				LEFT JOIN #HIST_MATL_PROBS B
				ON A.CARGO_TYPE = B.CARGO_TYPE
				AND A.CONTAINER_SIZE = B.CONTAINER_SIZE

				SELECT DISTINCT A.SHIPMENT_NO_X, A.SHIPMENT_VRSN_ID_X, A.SHIPMENT_STATUS,B.SERVICECODE
				into #RAW_SERV_MATL
				FROM ANALYTICSDATAMART.DBO.VW_FREESALEBOOKING A
				LEFT JOIN ANALYTICSDATAMART.DBO.ROUTELINKS B
				ON A.SHIPMENT_NO_X = B.SHIPMENT_NO_X
				AND A.SHIPMENT_VRSN_ID_X = B.SHIPMENT_VRSN_ID_X
				WHERE UPPER(A.SHIPMENT_STATUS) IN ('ACTIVE', 'CANCELLED BY CUSTOMER')

				SELECT SERVICECODE,case when COUNT(*) = 0.0 then 0.0 else (SUM(CASE WHEN SHIPMENT_STATUS = 'ACTIVE' THEN 1 END)+0.0)/COUNT(*) end as MATL_PROB -- TODO CHANGE TO 'ACTIVE' FOR USE ON 038
				into #SERV_MATL
				FROM #RAW_SERV_MATL
				GROUP BY SERVICECODE

				SELECT VESSEL, VOYAGE, SERVICECODE, FROMLEGSITECODE, TOLEGSITECODE, DEPARTUREDATE
						,case when SUM(FUTURE_TEU+LOADED_TEU) = 0 then 0 else SUM(FUTURE_TEU*MATL_PROB+LOADED_TEU)/SUM(FUTURE_TEU+LOADED_TEU) end as WGTD_AVG_MATL_PROB
						,SUM(FUTURE_TEU+LOADED_TEU) TEU_OTB
				into #HIST_MATL_OTB
				FROM #TEU_AND_MATL
				GROUP BY VESSEL, VOYAGE, SERVICECODE, FROMLEGSITECODE, TOLEGSITECODE, DEPARTUREDATE

		IF OBJECT_ID('CAPINVREPOSITORY.DBO.TMP_FINAL_ALLOCATION_OVERBOOK', 'U') IS NOT NULL
		  DROP TABLE CAPINVREPOSITORY.DBO.TMP_FINAL_ALLOCATION_OVERBOOK
		
			;with datal as
			(
				 SELECT DISTINCT A.VOYAGE	
								,A.VESSELCODE	
								,A.SERVICECODE	
								,A.SERVICECODEDIRECTION
								,A.VESSELOPERATOR
								,A.DEPARTUREPORT	
								,A.ARRIVALPORT	
								,A.LEGSEQID	
								,A.DEPARTUREDATE	
								,A.ARRIVALDATE
								,A.INTAKETEU	
								,A.INTAKETONS	
								,A.INTAKEPLUGS	
								,A.CAL_ALLOCATIONTEU
								,A.CAL_ALLOCATIONTONS
								,A.CAL_ALLOCATIONPLUGS
								,A.ISC_ALLOCATIONTEU
								,A.ISC_ALLOCATIONTONS
								,A.ISC_ALLOCATIONPLUGS
								,A.ISC
								,B.WGTD_AVG_MATL_PROB
								,B.TEU_OTB
								,C.MATL_PROB AS SERVICE_MATL_PROB
								,CASE WHEN B.TEU_OTB >= @V_OTB_MAT_PROB_THRESHOLD * A.CAL_ALLOCATIONTEU THEN WGTD_AVG_MATL_PROB	
										ELSE C.MATL_PROB 
								END MATL_PROB
								,(CASE WHEN B.TEU_OTB >= @V_OTB_MAT_PROB_THRESHOLD * A.CAL_ALLOCATIONTEU THEN WGTD_AVG_MATL_PROB ELSE C.MATL_PROB END) as ded
				FROM CAPINVREPOSITORY.DBO.TMP_FINAL_ALLOCATION A
				LEFT JOIN #HIST_MATL_OTB B
				ON A.VESSELCODE = B.VESSEL
				AND A.VOYAGE = B.VOYAGE
				AND A.SERVICECODE = B.SERVICECODE
				AND A.DEPARTUREPORT = B.FROMLEGSITECODE
				AND A.ARRIVALPORT = B.TOLEGSITECODE
				LEFT JOIN #SERV_MATL C
				ON A.SERVICECODE = C.SERVICECODE
			)
			SELECT DISTINCT A.VOYAGE	
								,A.VESSELCODE	
								,A.SERVICECODE	
								,A.SERVICECODEDIRECTION
								,A.VESSELOPERATOR
								,A.DEPARTUREPORT	
								,A.ARRIVALPORT	
								,A.LEGSEQID	
								,A.DEPARTUREDATE	
								,A.ARRIVALDATE
								,A.INTAKETEU	
								,A.INTAKETONS	
								,A.INTAKEPLUGS	
								,A.CAL_ALLOCATIONTEU
								,A.CAL_ALLOCATIONTONS
								,A.CAL_ALLOCATIONPLUGS
								,A.ISC_ALLOCATIONTEU
								,A.ISC_ALLOCATIONTONS
								,A.ISC_ALLOCATIONPLUGS
								,A.ISC
								,A.WGTD_AVG_MATL_PROB
								,A.TEU_OTB
								,A.MATL_PROB AS SERVICE_MATL_PROB
								,A.MATL_PROB 
								,case when a.ded = 0.0 then 0.0
									else ISNULL(1.0/
													(CASE WHEN A.TEU_OTB >= @V_OTB_MAT_PROB_THRESHOLD * A.CAL_ALLOCATIONTEU THEN A.WGTD_AVG_MATL_PROB ELSE A.MATL_PROB END)-1,0.0) 
								end as OVERBOOK_TEU_PCT 
				INTO CAPINVREPOSITORY.DBO.TMP_FINAL_ALLOCATION_OVERBOOK
				from datal a

		SET @V_RECORD_CNT = @@ROWCOUNT
		SET @V_SYSTEMTIME = GETUTCDATE()
			
		--UPDATE DETAIL 
		SET @V_NOTE = @V_STEP_NAME + ' COMPLETED SUCCESSFULLY'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = NULL
  					, @V_END_DT = @V_SYSTEMTIME
  					, @V_STATUS = 'COMPLETED'
  					, @V_ROWS_PROCESSED = @V_RECORD_CNT
  					, @V_ACTION = 2
  					, @V_NOTE = @V_NOTE;

		/*****************************************************************
				COMBINE ALLOCATIONS AND EMPTIES
		******************************************************************/	
		SET @V_STEP_ID = 90
		SET @V_STEP_NAME = 'AGGREGATE CONSUMPTION DATA'
		SET @V_NOTE = 'AGGREGATE CONSUMPTION DATA'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = @V_SYSTEMTIME
  					, @V_END_DT = NULL
  					, @V_STATUS = 'RUNNING'
  					, @V_ROWS_PROCESSED = NULL
  					, @V_ACTION = 1
  					, @V_NOTE = @V_NOTE;

		IF OBJECT_ID('CAPINVREPOSITORY.DBO.TMP_AGG_CAPFCST_FREESALECONSUMPTION', 'U') IS NOT NULL
		  DROP TABLE CAPINVREPOSITORY.DBO.TMP_AGG_CAPFCST_FREESALECONSUMPTION;

		--CREATE FREE SALE CONSUMPTIONS
		WITH DATA AS
		(
			SELECT  NT.VESSEL
					,NT.VOYAGE
					,NT.SERVICECODE
					, NT.FROMLEGSITECODE AS DEPARTUREPORT
					, NT.TOLEGSITECODE AS ARRIVALPORT
					, NT.LEGSEQID
					, NT.DEPARTUREDATE
					, NT.SERVICECODEDIRECTION
					, CAST(CASE WHEN NN.BUYINGSTRING IS NULL OR (NN.BUYINGSTRING IS NOT NULL AND LD.ROUTE_CD IS NULL) THEN 'LEAD'
						   ELSE NT.ROUTE_CD 
					  END AS VARCHAR(6)) AS ISC
					--FREESALE
					, SUM(CASE WHEN NT.ISFREESALE = 1 THEN NT.TEU ELSE 0 END) AS FS_CONSUMPTIONTEU
					, SUM(CASE WHEN NT.ISFREESALE = 1 THEN GROSSWEIGHT ELSE 0 END) AS FS_CONSUMPTIONTONS
					, SUM(CASE WHEN NT.ISFREESALE = 1 THEN NT.PLUGS ELSE 0 END) AS FS_CONSUMPTIONPLUGS
					--DISPLACEMENTS
					, SUM(COALESCE(DP.DISPLACEMENTFFE,0)) AS DISPLACEMENTFFE
					, SUM(COALESCE(DP.DISPLACEMENTTEU,0)) AS DISPLACEMENTTEU
					, SUM(COALESCE(DP.FFE, 0)) AS OOGFFE
					, SUM(COALESCE(DP.TEU,0)) AS OOGTEU
					, SUM(COALESCE(DP.FFEWITHOOG,0)) AS FFEWITHOOG
					, SUM(COALESCE(DP.TEUWITHOOG,0)) AS TEUWITHOOG
					--COMMITMENT
					, SUM(CASE WHEN NT.ISFREESALE = 0 THEN NT.TEU ELSE 0 END) AS COMMITMENT_CON_TEU
					, SUM(CASE WHEN NT.ISFREESALE = 0 THEN GROSSWEIGHT ELSE 0 END) AS COMMITMENT_CON_TONS
					, SUM(CASE WHEN NT.ISFREESALE = 0 THEN NT.PLUGS ELSE 0 END) AS COMMITMENT_CON_PLUGS
			FROM ANALYTICSDATAMART.DBO.CAPFCST_AD_CONSUMPTION  NT (NOLOCK)
			LEFT JOIN ANALYTICSDATAMART.DBO.AD_DISPLACEMENT_OOG DP (NOLOCK)
			ON NT.SHIPMENT_NO_X = DP.SHIPMENT_NO 
			AND NT.SHIPMENT_VRSN_ID_X = DP.SHIPMENTVERSIONID
			AND NT.SERVICECODE = DP.SERVICECODE
			LEFT JOIN ( --USING LEAD ROUTE TO DETERMINE IF THE ACTIVE OR PASSIVE (LEAD)
							SELECT DISTINCT SERVICECODE,SERVICECODEDIRECTION,LEAD_ROUTE AS ROUTE_CD,ISC
							FROM ANALYTICSDATAMART.DBO.DIM_LEAD_ROUTE
							UNION 
							SELECT DISTINCT SERVICECODE,SERVICECODEDIRECTION,CHILD_ROUTE, ISC
							FROM ANALYTICSDATAMART.DBO.DIM_LEAD_ROUTE
					  )LD
			ON NT.SERVICECODE = LD.SERVICECODE
			AND NT.SERVICECODEDIRECTION = LD.SERVICECODEDIRECTION
			AND NT.ROUTE_CD = LD.ROUTE_CD
			LEFT JOIN (
				SELECT DISTINCT WEEKNO,SERVICECODE,BUYINGSTRING,VESSELCODE,VOYAGE,DEPARTUREPORT,ARRIVALPORT
				FROM ANALYTICSDATAMART.DBO.AD_ISC_COMMITED_LEGS
				WHERE BUYINGSTRING IS NOT NULL AND BUYINGSTRING <> ''
			) NN
			ON NT.INT_ISO_YEARWEEK = NN.WEEKNO
			AND NT.SERVICECODE = NN.SERVICECODE
			AND NT.STRING_ID_X = NN.BUYINGSTRING
			AND NT.VESSEL = NN.VESSELCODE
			AND NT.VOYAGE = NN.VOYAGE
			AND NT.FROMLEGSITECODE = NN.DEPARTUREPORT
			AND NT.TOLEGSITECODE = NN.ARRIVALPORT
			WHERE cast(NT.DEPARTUREDATE as date) BETWEEN DATEADD(DAY, -@V_LOOKBACK_DAYS, @V_RUNDATE) AND DATEADD(DAY, @V_LOOKFORWARD_DAYS,@V_RUNDATE)
			GROUP BY	NT.VESSEL
						,NT.VOYAGE
						,NT.SERVICECODE
						, NT.FROMLEGSITECODE
						, NT.TOLEGSITECODE
						, NT.LEGSEQID
						, NT.DEPARTUREDATE
						, NT.SERVICECODEDIRECTION
						, CAST(CASE WHEN NN.BUYINGSTRING IS NULL OR (NN.BUYINGSTRING IS NOT NULL AND LD.ROUTE_CD IS NULL) THEN 'LEAD'
						   ELSE NT.ROUTE_CD 
					  END AS VARCHAR(6))
		)
		SELECT VESSEL
			,VOYAGE
			,SERVICECODE
			, DEPARTUREPORT
			, ARRIVALPORT
			, DEPARTUREDATE
			, SERVICECODEDIRECTION
			, LEGSEQID
			, ISC
			, FS_CONSUMPTIONTEU
			, FS_CONSUMPTIONTONS
			, FS_CONSUMPTIONPLUGS
			, DISPLACEMENTFFE
			, DISPLACEMENTTEU
			, OOGFFE
			, OOGTEU
			, FFEWITHOOG
			, TEUWITHOOG
			, COMMITMENT_CON_TEU
			, COMMITMENT_CON_TONS
			, COMMITMENT_CON_PLUGS
		INTO CAPINVREPOSITORY.DBO.TMP_AGG_CAPFCST_FREESALECONSUMPTION
		FROM DATA;

		SET @V_RECORD_CNT = @@ROWCOUNT
		SET @V_SYSTEMTIME = SYSDATETIME()

		--	LOG PROCESS DETAIL
		SET @V_NOTE = @V_STEP_NAME + ' COMPLETED SUCCESSFULLY'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = NULL
  					, @V_END_DT = @V_SYSTEMTIME
  					, @V_STATUS = 'COMPLETED'
  					, @V_ROWS_PROCESSED = @V_RECORD_CNT
  					, @V_ACTION = 2
  					, @V_NOTE = @V_NOTE;

		/***************************************************************
					Get Commitment Numbers
		****************************************************************/
		SET @V_STEP_ID = 100
		SET @V_STEP_NAME = 'GET COMMITMENT FILINGS NUMBERS'
		SET @V_NOTE = 'GET COMMITMENT FILINGS NUMBERS'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = @V_SYSTEMTIME
  					, @V_END_DT = NULL
  					, @V_STATUS = 'RUNNING'
  					, @V_ROWS_PROCESSED = NULL
  					, @V_ACTION = 1
  					, @V_NOTE = @V_NOTE;

				WITH T1 AS 
				(
							SELECT L.RUNID
								,L.VESSEL	
								,L.VOYAGE	
								,L.SERVICECODE	
								,ISNULL(LD.ISC, 'LEAD') AS ISC
								,L.DEPARTUREPORT
								,L.ARRIVALPORT
								,L.DEPARTUREDATE
								,SUM(COMMITMENTALLOCATIONTEU) AS COMMITMENTALLOCATIONTEU
								,SUM(COMMITMENTALLOCATIONMTS) AS COMMITMENTALLOCATIONMTS
								,SUM(COMMITMENTALLOCATIONPLUGS) AS COMMITMENTALLOCATIONPLUGS
							FROM ANALYTICSDATAMART.DBO.COMMITMENTFILINGS L
							LEFT JOIN ( 
										SELECT DISTINCT SERVICECODE,SERVICECODEDIRECTION,LEAD_ROUTE AS ROUTE_CD,ISC
										FROM ANALYTICSDATAMART.DBO.DIM_LEAD_ROUTE
										UNION 
										SELECT DISTINCT SERVICECODE,SERVICECODEDIRECTION,CHILD_ROUTE, ISC
										FROM ANALYTICSDATAMART.DBO.DIM_LEAD_ROUTE
										)LD
							ON L.SERVICECODE = LD.SERVICECODE
							AND L.SERVICECODEDIRECTION = LD.SERVICECODEDIRECTION
							AND L.ROUTECODE = LD.ROUTE_CD
							WHERE RUNID = (SELECT MAX(RUNID) FROM ANALYTICSDATAMART.DBO.COMMITMENTFILINGS)
							GROUP BY L.RUNID
								,L.VESSEL	
								,L.VOYAGE	
								,L.SERVICECODE	
								,ISNULL(LD.ISC, 'LEAD')
								,L.DEPARTUREPORT
								,L.ARRIVALPORT
								,L.DEPARTUREDATE
			)
				SELECT N.RUNID
						,N.VESSEL	
						,N.VOYAGE	
						,N.SERVICECODE	
						,N.ISC
						,N.DEPARTUREPORT
						,N.ARRIVALPORT
						,N.DEPARTUREDATE
						,N.COMMITMENTALLOCATIONTEU
						,N.COMMITMENTALLOCATIONMTS
						,N.COMMITMENTALLOCATIONPLUGS
			INTO #AGGCOMMITFILINGS
			FROM T1 N
			INNER JOIN 
			(
				SELECT VESSEL,VOYAGE,SERVICECODE,DEPARTUREPORT,ARRIVALPORT,ISC,MAX(DEPARTUREDATE) AS  DEPARTUREDATE
				FROM T1
				GROUP BY VESSEL,VOYAGE,SERVICECODE,DEPARTUREPORT,ARRIVALPORT,ISC
			)G
			ON N.VESSEL = G.VESSEL
			AND N.VOYAGE = G.VOYAGE
			AND N.SERVICECODE = G.SERVICECODE
			AND N.DEPARTUREPORT = G.DEPARTUREPORT
			AND N.ARRIVALPORT = G.ARRIVALPORT
			AND N.ISC = G.ISC
			AND N.DEPARTUREDATE = G.DEPARTUREDATE;

		SET @V_RECORD_CNT = @@ROWCOUNT
		SET @V_SYSTEMTIME = SYSDATETIME()

		--	LOG PROCESS DETAIL
		SET @V_NOTE = @V_STEP_NAME + ' COMPLETED SUCCESSFULLY'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = NULL
  					, @V_END_DT = @V_SYSTEMTIME
  					, @V_STATUS = 'COMPLETED'
  					, @V_ROWS_PROCESSED = @V_RECORD_CNT
  					, @V_ACTION = 2
  					, @V_NOTE = @V_NOTE;											

		/***************************************************************
					BUILD FINAL TABLE
		****************************************************************/	
		SET @V_STEP_ID = 110
		SET @V_STEP_NAME = 'DELETE EXISTING RUN DATA'
		SET @V_NOTE = 'DELETE EXISTING RUN DATA'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = @V_SYSTEMTIME
  					, @V_END_DT = NULL
  					, @V_STATUS = 'RUNNING'
  					, @V_ROWS_PROCESSED = NULL
  					, @V_ACTION = 1
  					, @V_NOTE = @V_NOTE;

		DELETE FROM ANALYTICSDATAMART.DBO.AD_CAPFCST_FREESALE_UBOAT
		WHERE RUNDATE = CAST(@V_RUNDATE AS DATE);

		SET @V_RECORD_CNT = @@ROWCOUNT
		SET @V_SYSTEMTIME = SYSDATETIME()

		--	LOG PROCESS DETAIL
		SET @V_NOTE = @V_STEP_NAME + ' COMPLETED SUCCESSFULLY'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = NULL
  					, @V_END_DT = @V_SYSTEMTIME
  					, @V_STATUS = 'COMPLETED'
  					, @V_ROWS_PROCESSED = @V_RECORD_CNT
  					, @V_ACTION = 2
  					, @V_NOTE = @V_NOTE;

		--LOG DETAIL
		SET @V_STEP_ID = 120
		SET @V_STEP_NAME = 'CREATE UBOAT DATA TABLE'
		SET @V_NOTE = 'AGGREGATE CONSUMPTION DATA AT THE RUNID/VESSELCODE/VOYAGE/SERVICECODE/DEPARTUREPORT/ARRIVALPORT LEVEL'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = @V_SYSTEMTIME
  					, @V_END_DT = NULL
  					, @V_STATUS = 'RUNNING'
  					, @V_ROWS_PROCESSED = NULL
  					, @V_ACTION = 1
  					, @V_NOTE = @V_NOTE;
	
		INSERT INTO ANALYTICSDATAMART.DBO.AD_CAPFCST_FREESALE_UBOAT
           ([ID]
           ,[RUNID]
           ,[RUNDATE]
           ,[VOYAGE]
           ,[VESSELCODE]
           ,[SERVICECODE]
           ,[LEGSEQID]
           ,[SERVICECODEDIRECTION]
           ,[DEPARTUREPORT]
           ,[ARRIVALPORT]
           ,[VESSELOPERATOR]
           ,[DEPARTUREDATE]
           ,[ARRIVALDATE]
           ,[INTAKETEU]
           ,[INTAKETONS]
           ,[INTAKEPLUGS]
           ,[ALLOCATIONTEU]
           ,[ALLOCATIONTONS]
           ,[ALLOCATIONPLUGS]
           ,[TOTALEMPTYTEU]
           ,[TOTALCOMMITFILINGSTEU]
		   ,TOTALCOMMITCONSUMPTIONTEU
           ,[FREESALEALLOCATIONTEU]
           ,[OVERBOOKTEU]
		   ,OVERBOOKPCT
           ,[FREESALE_AVAILABLETEU]
           ,[FREESALECONSUMPTIONTEU]
           ,[FREESALEDISPLACEMENTTEU]
           ,[DISPLACEMENTFFE]
           ,[CONSUMPTIONDISPLACEMENTTEU]
           ,[REMAINING_FREESALEDISPLACEMENTTEU]
           ,[REMAINING_FREESALETEU]
           ,[REMAINING_FREESALEDISPLACEMENTNOOVERBOOKTEU]
           ,[REMAINING_FREESALENOOVERBOOKTEU]
           ,[REMAINING_FREESALEDISPLACEMENTFFE]
           ,[REMAINING_FREESALEFFE]
           ,[TOTALEMPTYTONS]
           ,[TOTALCOMMITFILINGSTONS]
		   ,TOTALCOMMITCONSUMPTIONTONs
           ,[FREESALEALLOCATIONTONS]
           ,[OVERBOOKTONS]
           ,[FREESALE_AVAILABLETONS]
           ,[FREESALE_AVAILABLENOOVERBOOKTONS]
           ,[FREESALECONSUMPTIONTONS]
           ,[REMAINING_FREESALETONS]
           ,[REMAINING_FREESALENOOVERBOOKTONS]
           ,[TOTALCOMMITFILINGSPLUGS]
		   ,TOTALCOMMITCONSUMPTIONPLUGS
           ,[FREESALEALLOCATIONPLUGS]
           ,[OVERBOOKPLUGS]
           ,[FREESALE_AVAILABLEPLUGS]
           ,[FREESALE_AVAILABLENOOVERBOOKPLUGS]
           ,[FREESALECONSUMPTIONPLUGS]
           ,[REMAINING_FREESALEPLUGS]
           ,[REMAINING_FREESALENOOVERBOOKPLUGS]
		   ,[ISC])
		SELECT ROW_NUMBER() OVER(ORDER BY VOYAGE) AS ID
           ,MK.[RUNID]
           ,MK.[RUNDATE]
           ,MK.[VOYAGE]
           ,MK.[VESSELCODE]
           ,MK.[SERVICECODE]
           ,MK.[LEGSEQID]
           ,MK.[SERVICECODEDIRECTION]
           ,MK.[DEPARTUREPORT]
           ,MK.[ARRIVALPORT]
           ,MK.VESSELOPERATOR
           ,MK.[DEPARTUREDATE]
           ,MK.[ARRIVALDATE]
           ,MK.[INTAKETEU]
           ,MK.[INTAKETONS]
           ,MK.[INTAKEPLUGS]
           ,MK.[ALLOCATIONTEU]
           ,MK.[ALLOCATIONTONS]
           ,MK.[ALLOCATIONPLUGS]
           ,MK.[TOTALEMPTYTEU]
           ,MK.[TOTALCOMMITFILINGSTEU]
		   ,MK.TOTALCOMMITCONSUMPTIONTEU
           ,MK.[FREESALEALLOCATIONTEU]
           ,MK.[OVERBOOKTEU]
		   ,OVERBOOKPCT
           ,MK.[FREESALE_AVAILABLETEU]
           ,MK.[FREESALECONSUMPTIONTEU]
           ,MK.[FREESALEDISPLACEMENTTEU]
           ,MK.[DISPLACEMENTFFE]
           ,MK.[CONSUMPTIONDISPLACEMENTTEU]
           ,MK.[REMAINING_FREESALEDISPLACEMENTTEU]
           ,MK.[REMAINING_FREESALETEU]
           ,MK.[REMAINING_FREESALEDISPLACEMENTNOOVERBOOKTEU]
           ,MK.[REMAINING_FREESALENOOVERBOOKTEU]
           ,MK.[REMAINING_FREESALEDISPLACEMENTFFE]
           ,MK.[REMAINING_FREESALEFFE]
           ,MK.[TOTALEMPTYTONS]
           ,MK.[TOTALCOMMITFILINGSTONS]
		   ,MK.TOTALCOMMITCONSUMPTIONTONS
           ,MK.[FREESALEALLOCATIONTONS]
           ,MK.[OVERBOOKTONS]
           ,MK.[FREESALE_AVAILABLETONS]
           ,MK.[FREESALE_AVAILABLENOOVERBOOKTONS]
           ,MK.[FREESALECONSUMPTIONTONS]
           ,MK.[REMAINING_FREESALETONS]
           ,MK.[REMAINING_FREESALENOOVERBOOKTONS]
           ,MK.[TOTALCOMMITFILINGSPLUGS]
		   ,MK.TOTALCOMMITCONSUMPTIONPLUGS
           ,MK.[FREESALEALLOCATIONPLUGS]
           ,MK.[OVERBOOKPLUGS]
           ,MK.[FREESALE_AVAILABLEPLUGS]
           ,MK.[FREESALE_AVAILABLENOOVERBOOKPLUGS]
           ,MK.[FREESALECONSUMPTIONPLUGS]
           ,MK.[REMAINING_FREESALEPLUGS]
           ,MK.[REMAINING_FREESALENOOVERBOOKPLUGS]
		   ,MK.[ISC]
			FROM
			(
				SELECT DISTINCT 
						@V_RUNID AS RUNID
						, @V_RUNDATE AS RUNDATE
						,A.VOYAGE
						,A.VESSELCODE	
						,A.SERVICECODE	
						,A.LEGSEQID
						,A.SERVICECODEDIRECTION
						,A.DEPARTUREPORT	
						,A.ARRIVALPORT
						,A.VESSELOPERATOR	
						,A.DEPARTUREDATE	
						,isnull(A.ARRIVALDATE,A.DEPARTUREDATE) as ARRIVALDATE
						,A.INTAKETEU	
						,A.INTAKETONS	
						,A.INTAKEPLUGS	
						,A.CAL_ALLOCATIONTEU AS ALLOCATIONTEU	
						,A.CAL_ALLOCATIONTONS AS ALLOCATIONTONS	
						,A.CAL_ALLOCATIONPLUGS AS ALLOCATIONPLUGS
						,A.ISC
						--Total Empties
						, CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTEU,0) ELSE 0 END AS TOTALEMPTYTEU
						--Commitment Allocation (Filings) -- Change this once we get commitment data
						, CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONTEU,0) < COALESCE(CON.COMMITMENT_CON_TEU,0) THEN COALESCE(CON.COMMITMENT_CON_TEU,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONTEU,0) END  AS TOTALCOMMITFILINGSTEU
						, COALESCE(CON.COMMITMENT_CON_TEU,0) AS TOTALCOMMITCONSUMPTIONTEU
						--FREESALE Available --WITH NO OVERBOOK		
						, A.CAL_ALLOCATIONTEU 
							- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTEU,0) ELSE 0 END 
							- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONTEU,0) < COALESCE(CON.COMMITMENT_CON_TEU,0) THEN COALESCE(CON.COMMITMENT_CON_TEU,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONTEU,0) END AS FREESALEALLOCATIONTEU
						--Over booked teu = Overbook percent * (FREESALE Available --WITH NO OVERBOOK)
						, ROUND((OVERBOOK_TEU_PCT * (A.CAL_ALLOCATIONTEU 
								- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTEU,0) ELSE 0 END 
								- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONTEU,0) < COALESCE(CON.COMMITMENT_CON_TEU,0) THEN COALESCE(CON.COMMITMENT_CON_TEU,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONTEU,0) END)),0) AS OVERBOOKTEU
						--Overbook Percent
						,CAST(OVERBOOK_TEU_PCT AS NUMERIC(10,5)) AS OVERBOOKPCT
						--FREESALE Available (FREESALE_AVAILABLETEU) -- WITH OVERBOOK = FREESALECAL_ALLOCATIONTEU + OVERBOOKTEU
						, ( A.CAL_ALLOCATIONTEU 
							- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTEU,0) ELSE 0 END 
							- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONTEU,0) < COALESCE(CON.COMMITMENT_CON_TEU,0) THEN COALESCE(CON.COMMITMENT_CON_TEU,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONTEU,0) END)
							 + ROUND(( OVERBOOK_TEU_PCT * ( A.CAL_ALLOCATIONTEU 
								- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTEU,0) ELSE 0 END 
								- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONTEU,0) < COALESCE(CON.COMMITMENT_CON_TEU,0) THEN COALESCE(CON.COMMITMENT_CON_TEU,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONTEU,0) END)),0) AS FREESALE_AVAILABLETEU
						, COALESCE(CON.FS_CONSUMPTIONTEU,0) AS FREESALECONSUMPTIONTEU
						, COALESCE(DISPLACEMENTTEU,0) AS FREESALEDISPLACEMENTTEU
						, COALESCE(CON.DISPLACEMENTFFE,0) AS DISPLACEMENTFFE
						--Freesale consumption + displacement
						, COALESCE(CON.FS_CONSUMPTIONTEU,0) 
							+ COALESCE(DISPLACEMENTTEU,0) AS CONSUMPTIONDISPLACEMENTTEU
						--Remaing with displacement
						, (( A.CAL_ALLOCATIONTEU 
								- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTEU,0) ELSE 0 END 
								- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONTEU,0) < COALESCE(CON.COMMITMENT_CON_TEU,0) THEN COALESCE(CON.COMMITMENT_CON_TEU,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONTEU,0) END)
							 + ROUND(( OVERBOOK_TEU_PCT * (A.CAL_ALLOCATIONTEU 
								- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTEU,0) ELSE 0 END 
								- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONTEU,0) < COALESCE(CON.COMMITMENT_CON_TEU,0) THEN COALESCE(CON.COMMITMENT_CON_TEU,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONTEU,0) END)),0) ) 
								- COALESCE(CON.FS_CONSUMPTIONTEU,0) 
								- COALESCE(CON.DISPLACEMENTTEU,0) AS REMAINING_FREESALEDISPLACEMENTTEU
						, ((A.CAL_ALLOCATIONTEU 
								- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTEU,0) ELSE 0 END 
								- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONTEU,0) < COALESCE(CON.COMMITMENT_CON_TEU,0) THEN COALESCE(CON.COMMITMENT_CON_TEU,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONTEU,0) END)
							 + ROUND(( OVERBOOK_TEU_PCT * (A.CAL_ALLOCATIONTEU 
									- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTEU,0) ELSE 0 END 
									- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONTEU,0) < COALESCE(CON.COMMITMENT_CON_TEU,0) THEN COALESCE(CON.COMMITMENT_CON_TEU,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONTEU,0) END)),0) ) 
									- COALESCE(CON.FS_CONSUMPTIONTEU,0) AS REMAINING_FREESALETEU
						--REMAINING TEU WITH NO OVERBOOK
						, (( A.CAL_ALLOCATIONTEU 
								- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTEU,0) ELSE 0 END 
									- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONTEU,0) < COALESCE(CON.COMMITMENT_CON_TEU,0) THEN COALESCE(CON.COMMITMENT_CON_TEU,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONTEU,0) END))
										- COALESCE(CON.FS_CONSUMPTIONTEU,0) 
											- COALESCE(CON.DISPLACEMENTTEU,0) AS REMAINING_FREESALEDISPLACEMENTNOOVERBOOKTEU
						, (( A.CAL_ALLOCATIONTEU 
								- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTEU,0) ELSE 0 END 
									- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONTEU,0) < COALESCE(CON.COMMITMENT_CON_TEU,0) THEN COALESCE(CON.COMMITMENT_CON_TEU,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONTEU,0) END)) 
										- COALESCE(CON.FS_CONSUMPTIONTEU,0) AS REMAINING_FREESALENOOVERBOOKTEU
						--REMAINING CAPACITY FFE
						, ((( A.CAL_ALLOCATIONTEU 
								- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTEU,0) ELSE 0 END 
								- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONTEU,0) < COALESCE(CON.COMMITMENT_CON_TEU,0) THEN COALESCE(CON.COMMITMENT_CON_TEU,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONTEU,0) END)
							  + ROUND(( OVERBOOK_TEU_PCT * ( A.CAL_ALLOCATIONTEU 
								- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTEU,0) ELSE 0 END 
								- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONTEU,0) < COALESCE(CON.COMMITMENT_CON_TEU,0) THEN COALESCE(CON.COMMITMENT_CON_TEU,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONTEU,0) END)),0) ) 
								- COALESCE(CON.FS_CONSUMPTIONTEU,0) 
								- COALESCE(CON.DISPLACEMENTTEU,0)) / @V_FFE_TEU_MULTIPLIER AS REMAINING_FREESALEDISPLACEMENTFFE
						, ((( A.CAL_ALLOCATIONTEU 
							- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTEU,0) ELSE 0 END 
							- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONTEU,0) < COALESCE(CON.COMMITMENT_CON_TEU,0) THEN COALESCE(CON.COMMITMENT_CON_TEU,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONTEU,0) END)
							 + ROUND(( OVERBOOK_TEU_PCT * ( A.CAL_ALLOCATIONTEU 
									- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTEU,0) ELSE 0 END
									- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONTEU,0) < COALESCE(CON.COMMITMENT_CON_TEU,0) THEN COALESCE(CON.COMMITMENT_CON_TEU,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONTEU,0) END)),0) ) - COALESCE(CON.FS_CONSUMPTIONTEU,0)) / @V_FFE_TEU_MULTIPLIER AS REMAINING_FREESALEFFE
						--EMPTIES AND TONS
						, CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTONS,0) ELSE 0 END AS TOTALEMPTYTONS
						--Commitment Filings --Tons
						, CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONMTS,0) < COALESCE(CON.COMMITMENT_CON_TONS,0) THEN COALESCE(CON.COMMITMENT_CON_TONS,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONMTS,0) END AS TOTALCOMMITFILINGSTONS
						, COALESCE(CON.COMMITMENT_CON_TONS,0) AS TOTALCOMMITCONSUMPTIONTONS
						--FREE SALES ALLOCATION TONS 
						, A.CAL_ALLOCATIONTONS 
								- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTONS,0) ELSE 0 END 
								- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONMTS,0) < COALESCE(CON.COMMITMENT_CON_TONS,0) THEN COALESCE(CON.COMMITMENT_CON_TONS,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONMTS,0) END AS FREESALEALLOCATIONTONS
						,(OVERBOOK_TEU_PCT * ( A.CAL_ALLOCATIONTONS 
								- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTONS,0) ELSE 0 END 
								- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONMTS,0) < COALESCE(CON.COMMITMENT_CON_TONS,0) THEN COALESCE(CON.COMMITMENT_CON_TONS,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONMTS,0) END)) AS OVERBOOKTONS
						,(A.CAL_ALLOCATIONTONS 
							- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTONS,0) ELSE 0 END 
							- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONMTS,0) < COALESCE(CON.COMMITMENT_CON_TONS,0) THEN COALESCE(CON.COMMITMENT_CON_TONS,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONMTS,0) END)
							 + (OVERBOOK_TEU_PCT * (A.CAL_ALLOCATIONTONS 
								- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTONS,0) ELSE 0 END 
								- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONMTS,0) < COALESCE(CON.COMMITMENT_CON_TONS,0) THEN COALESCE(CON.COMMITMENT_CON_TONS,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONMTS,0) END)) AS FREESALE_AVAILABLETONS
						--AVAILABLE TONS -- NO OVERBOOKING
						, (A.CAL_ALLOCATIONTONS 
							- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTONS,0) ELSE 0 END 
							- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONMTS,0) < COALESCE(CON.COMMITMENT_CON_TONS,0) THEN COALESCE(CON.COMMITMENT_CON_TONS,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONMTS,0) END)  AS FREESALE_AVAILABLENOOVERBOOKTONS
						, COALESCE(CON.FS_CONSUMPTIONTONS,0) AS FREESALECONSUMPTIONTONS
						, (( A.CAL_ALLOCATIONTONS 
								- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTONS,0) ELSE 0 END 
								- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONMTS,0) < COALESCE(CON.COMMITMENT_CON_TONS,0) THEN COALESCE(CON.COMMITMENT_CON_TONS,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONMTS,0) END)
							 + (OVERBOOK_TEU_PCT * (A.CAL_ALLOCATIONTONS 
								- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTONS,0) ELSE 0 END 
								- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONMTS,0) < COALESCE(CON.COMMITMENT_CON_TONS,0) THEN COALESCE(CON.COMMITMENT_CON_TONS,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONMTS,0) END)) ) 
								- COALESCE(CON.FS_CONSUMPTIONTONS,0) AS REMAINING_FREESALETONS
						--TONS WITH NO OVER BOOKING
						,((A.CAL_ALLOCATIONTONS 
								- CASE WHEN A.ISC = 'LEAD' THEN COALESCE(B.TOTALEMPTYTONS,0) ELSE 0 END 
								- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONMTS,0) < COALESCE(CON.COMMITMENT_CON_TONS,0) THEN COALESCE(CON.COMMITMENT_CON_TONS,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONMTS,0) END)) 
								- COALESCE(CON.FS_CONSUMPTIONTONS,0) AS REMAINING_FREESALENOOVERBOOKTONS
						---PLUGS
						--Commit Fillings --Plugs
						,CASE WHEN CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONPLUGS,0) < COALESCE(CON.COMMITMENT_CON_PLUGS,0) THEN COALESCE(CON.COMMITMENT_CON_PLUGS,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONPLUGS,0) END < COALESCE(CON.COMMITMENT_CON_PLUGS,0) THEN COALESCE(CON.COMMITMENT_CON_PLUGS,0) ELSE CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONPLUGS,0) < COALESCE(CON.COMMITMENT_CON_PLUGS,0) THEN COALESCE(CON.COMMITMENT_CON_PLUGS,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONPLUGS,0) END END as TOTALCOMMITFILINGSPLUGS
						,COALESCE(CON.COMMITMENT_CON_PLUGS,0) AS TOTALCOMMITCONSUMPTIONPLUGS
						,A.CAL_ALLOCATIONPLUGS 
							- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONPLUGS,0) < COALESCE(CON.COMMITMENT_CON_PLUGS,0) THEN COALESCE(CON.COMMITMENT_CON_PLUGS,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONPLUGS,0) END AS FREESALEALLOCATIONPLUGS
						,ROUND((OVERBOOK_TEU_PCT * (A.CAL_ALLOCATIONPLUGS 
							- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONPLUGS,0) < COALESCE(CON.COMMITMENT_CON_PLUGS,0) THEN COALESCE(CON.COMMITMENT_CON_PLUGS,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONPLUGS,0) END)),0) AS OVERBOOKPLUGS
						,(A.CAL_ALLOCATIONPLUGS 
							- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONPLUGS,0) < COALESCE(CON.COMMITMENT_CON_PLUGS,0) THEN COALESCE(CON.COMMITMENT_CON_PLUGS,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONPLUGS,0) END)
							+ ROUND((OVERBOOK_TEU_PCT * (A.CAL_ALLOCATIONPLUGS 
									- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONPLUGS,0) < COALESCE(CON.COMMITMENT_CON_PLUGS,0) THEN COALESCE(CON.COMMITMENT_CON_PLUGS,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONPLUGS,0) END)),0) AS FREESALE_AVAILABLEPLUGS
						--AVAILABLE PLUGS - NO OVERBOOKING
						,( A.CAL_ALLOCATIONPLUGS 
							- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONPLUGS,0) < COALESCE(CON.COMMITMENT_CON_PLUGS,0) THEN COALESCE(CON.COMMITMENT_CON_PLUGS,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONPLUGS,0) END) AS FREESALE_AVAILABLENOOVERBOOKPLUGS
						, COALESCE(CON.FS_CONSUMPTIONPLUGS,0) AS FREESALECONSUMPTIONPLUGS
						, ROUND((( A.CAL_ALLOCATIONPLUGS 
							 - CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONPLUGS,0) < COALESCE(CON.COMMITMENT_CON_PLUGS,0) THEN COALESCE(CON.COMMITMENT_CON_PLUGS,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONPLUGS,0) END)
							 + ROUND((OVERBOOK_TEU_PCT * (A.CAL_ALLOCATIONPLUGS 
									- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONPLUGS,0) < COALESCE(CON.COMMITMENT_CON_PLUGS,0) THEN COALESCE(CON.COMMITMENT_CON_PLUGS,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONPLUGS,0) END)),0) ) 
									- COALESCE(CON.FS_CONSUMPTIONPLUGS,0),0) AS REMAINING_FREESALEPLUGS
						--PLUGS --NO OVERBOOKING
						, ROUND((( A.CAL_ALLOCATIONPLUGS 
									- CASE WHEN COALESCE(CM.COMMITMENTALLOCATIONPLUGS,0) < COALESCE(CON.COMMITMENT_CON_PLUGS,0) THEN COALESCE(CON.COMMITMENT_CON_PLUGS,0) ELSE COALESCE(CM.COMMITMENTALLOCATIONPLUGS,0) END)) 
									- COALESCE(CON.FS_CONSUMPTIONPLUGS,0),0) AS REMAINING_FREESALENOOVERBOOKPLUGS
				FROM  CAPINVREPOSITORY.DBO.TMP_FINAL_ALLOCATION_OVERBOOK A
				LEFT JOIN #aggCommitFilings CM (NOLOCK)
				ON LTRIM(RTRIM(A.VESSELCODE)) = LTRIM(RTRIM(CM.VESSEL))
				AND LTRIM(RTRIM(A.VOYAGE)) = LTRIM(RTRIM(CM.VOYAGE))
				AND LTRIM(RTRIM(A.SERVICECODE)) = LTRIM(RTRIM(CM.SERVICECODE))
				AND left(LTRIM(RTRIM(A.DEPARTUREPORT)),5) = left(LTRIM(RTRIM(CM.DEPARTUREPORT)),5)
				AND left(LTRIM(RTRIM(A.ARRIVALPORT)),5) = left(LTRIM(RTRIM(CM.ARRIVALPORT)),5)
				AND A.ISC = CM.ISC
				LEFT JOIN ANALYTICSDATAMART.DBO.CAPINV_AGG_ROCK_LEG B (NOLOCK)
				ON A.VESSELCODE = B.VESSELCODE
				AND A.VOYAGE = B.VOYAGE
				AND A.SERVICECODE = B.SERVICECODE
				AND A.DEPARTUREPORT = B.DEPARTUREPORT
				AND A.ARRIVALPORT = B.ARRIVALPORT
				LEFT JOIN CAPINVREPOSITORY.DBO.TMP_AGG_CAPFCST_FREESALECONSUMPTION CON
				ON A.VESSELCODE = CON.VESSEL
				AND A.VOYAGE = CON.VOYAGE
				AND A.SERVICECODE = CON.SERVICECODE
				AND A.DEPARTUREPORT = CON.DEPARTUREPORT
				AND A.ARRIVALPORT = CON.ARRIVALPORT
				AND A.ISC = CON.ISC
				WHERE A.SERVICECODE IN (SELECT DISTINCT SERVICECODE FROM CAPINVREPOSITORY.DBO.TMP_FINAL_ALLOCATION_OVERBOOK)
		)MK;

		SET @V_RECORD_CNT = @@ROWCOUNT
		SET @V_SYSTEMTIME = SYSDATETIME()

		--	LOG PROCESS DETAIL
		SET @V_NOTE = @V_STEP_NAME + ' COMPLETED SUCCESSFULLY'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = NULL
  					, @V_END_DT = @V_SYSTEMTIME
  					, @V_STATUS = 'COMPLETED'
  					, @V_ROWS_PROCESSED = @V_RECORD_CNT
  					, @V_ACTION = 2
  					, @V_NOTE = @V_NOTE;

		if @V_PUBLISHRUN = 1
		begin
			--If there are no records in UBoat after run use previous published run
			set @V_RECORD_CNT =(select count(1)
								from ANALYTICSDATAMART.DBO.AD_CAPFCST_FREESALE_UBOAT
								where rundate = @V_RUNDATE
						)
			if @V_RECORD_CNT > 0
			begin
				update 	ANALYTICSDATAMART.DBO.[ProcessPublish]
				set PublishedRunID	= @V_RUNID
					,RunDateTime = @V_RUNDATE
				where processmasterid = @V_PROCESSMASTER
			end
		end 

		SET @V_NOTE = @V_PROCESS_NAME + ' COMPLETED SUCCESSFULLY'
		EXEC DBO.USP_LOG_PROCESS @V_PROCESS_ID = @V_PROCESS_ID
							, @V_PROCESS_NAME = @V_PROCESS_NAME
							, @V_USER_NAME = @V_SYSTEM_USER
							, @V_START_DT = NULL
							, @V_END_DT = @V_SYSTEMTIME
							, @V_STATUS = 'COMPLETED'
							, @V_ACTION = 2
							, @V_PARENT_PROCESS_ID = NULL
							, @V_NOTE = @V_NOTE
							, @V_START_STEP = 1;

		SET @V_ERROR_CODE = 0
		RETURN @V_ERROR_CODE
	END TRY
	BEGIN CATCH
		SET @V_MSG = COALESCE(ERROR_PROCEDURE() +' LINE:'+CAST(ERROR_LINE() AS VARCHAR(10))+' MESSAGE:' +ERROR_MESSAGE(),'')
		SET @V_ERRORMESSAGE = 'PROCESS TO REFRESH UBOAT DATA FAILED: ERR:' + @V_MSG
		SET @V_ERRORSEVERITY = ERROR_SEVERITY()  
		SET @V_SYSTEMTIME = GETUTCDATE()
		
		--UPDATE DETAIL 
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = NULL
  					, @V_END_DT = @V_SYSTEMTIME
  					, @V_STATUS = 'FAILED'
  					, @V_ROWS_PROCESSED = NULL
  					, @V_ACTION = 2
  					, @V_NOTE = @V_ERRORMESSAGE
  					;

		--UPDATE PROCESS --COMPLETE PROCESS
		EXEC DBO.USP_LOG_PROCESS @V_PROCESS_ID = @V_PROCESS_ID
							, @V_PROCESS_NAME = @V_PROCESS_NAME
							, @V_USER_NAME = @V_SYSTEM_USER
							, @V_START_DT = NULL
							, @V_END_DT = @V_SYSTEMTIME
							, @V_STATUS = 'FAILED'
							, @V_ACTION = 2
							, @V_PARENT_PROCESS_ID = NULL
							, @V_NOTE =  @V_ERRORMESSAGE
							, @V_START_STEP = 1
							;  

		SET @V_ERROR_CODE = -1
		RETURN @V_ERROR_CODE
	END CATCH
END

