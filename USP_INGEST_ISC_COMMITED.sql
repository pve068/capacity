USE [AnalyticsDatamart]
GO

/****** Object:  StoredProcedure [dbo].[USP_INGEST_ISC_COMMITED]    Script Date: 12-02-2018 11:03:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO








CREATE PROCEDURE [dbo].[USP_INGEST_ISC_COMMITED]
/****************************************************************************************************
* COPYRIGHT REVENUE ANALYTICS 2017
* ALL RIGHTS RESERVED
*
* CREATED BY: DATA ENGINEERING
* FILENAME:   USP_INGESTISCCOMMITED.SQL
* DATE:       06/21/2017
*
* APPLICATION:  LOADS ICS COMMITED DATA FROM ETLRESPOSITORY
*               
* PARAMETERS:   @V_AuditVersionID == Audit version to run
*				@V_PARENT_PROCESS_ID == CALLING PROCESS
*				@V_ERROR_CODE		== RETURNED ERROR CODE
*
* INPUT(S):		ETLREOPOSITORY.DBO.STG_CAP_ISC_COMMITTED 
* OUTPUT(S):	ANALYTICSDATAMART.DBO.AD_ISC_COMMITED,ANALYTICSDATAMART.DBO.AD_ISC_COMMITED_LEGS
*  				
* ASSUMPTIONS: [ETLREPOSITORY].[DBO].[STG_CAP_ISC_COMMITTED] TABLE IS UPDATED
*
* EXAMPLE CALL:  DECLARE @V_ERROR_CODE INT
*				 DECLARE @V_AuditVersionID INT	
*				 EXEC [USP_INGESTISCCOMMITED] 0,0, @V_ERROR_CODE OUTPUT
*****************************************************************************************************
* NOTES:
*  NAME					CREATED        LAST MOD			COMMENTS
*  DE\ELM               6/21/2017						PROCEDURE CREATED
* Modification History:Modified the code to align with new ISC source and structure 
* Modified on:2018-FEB-13, Modified by :PVE068
****************************************************************************************************/
	 @V_AuditVersionID INT = NULL
	 ,@V_PARENT_PROCESS_ID INT = 0
	 ,@V_ERROR_CODE INT OUTPUT
AS
BEGIN
	SET NOCOUNT ON 
	--DECLARE VARIABLES
	DECLARE @V_ERRORMESSAGE NVARCHAR(4000)  
	DECLARE @V_MSG  NVARCHAR(4000)
	DECLARE @V_NOTE  NVARCHAR(4000)
	DECLARE @V_ERRORSEVERITY INT 
	DECLARE @v_ERRORSTATE INT 

	DECLARE @V_PROCESS_ID INT = NEXT VALUE FOR DBO.SEQ_LOG_PROCESS_ID
	DECLARE @V_PROCESS_NAME VARCHAR(255) = OBJECT_SCHEMA_NAME(@@PROCID) + '.' + OBJECT_NAME(@@PROCID)
	DECLARE @V_FIANLERROR INT
	DECLARE @V_SYSTEM_USER NVARCHAR(255) = SYSTEM_USER
	DECLARE @V_SYSTEMTIME DATETIME = GETUTCDATE()
	DECLARE @V_RECORD_CNT INT

	DECLARE @V_STEP_ID TINYINT
	DECLARE @V_STEP_NAME VARCHAR(255)

	BEGIN TRY
		--LOG PROCESS		
		EXEC DBO.USP_LOG_PROCESS @V_PROCESS_ID = @V_PROCESS_ID
							, @V_PROCESS_NAME = @V_PROCESS_NAME
							, @V_USER_NAME = @V_SYSTEM_USER
							, @V_START_DT = @V_SYSTEMTIME
							, @V_END_DT = NULL
							, @V_STATUS = 'RUNNING'
							, @V_ACTION = 1
							, @V_PARENT_PROCESS_ID = 0
							, @V_NOTE = 'PROCESS ISC COMMITED DATA'
							, @V_START_STEP = 1;

		SET @V_STEP_ID = 10
		SET @V_STEP_NAME = 'TRUNCATE EXISTING ISC COMMITTED DATA'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = @V_SYSTEMTIME
  					, @V_END_DT = NULL
  					, @V_STATUS = 'RUNNING'
  					, @V_ROWS_PROCESSED = NULL
  					, @V_ACTION = 1
  					, @V_NOTE = 'TRUNCATE EXISTING ISC COMMITTED DATA';
 

		TRUNCATE TABLE ANALYTICSDATAMART.DBO.AD_ISC_COMMITED;

		SET @V_RECORD_CNT = @@ROWCOUNT
		SET @V_SYSTEMTIME = GETUTCDATE()
		
		--UPDATE DETAIL 
		SET @V_NOTE = @V_NOTE +' COMPLETED SUCCESSFULLY'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = NULL
  					, @V_END_DT = @V_SYSTEMTIME
  					, @V_STATUS = 'COMPLETED'
  					, @V_ROWS_PROCESSED = @V_RECORD_CNT
  					, @V_ACTION = 2
  					, @V_NOTE =@V_NOTE
  					;

		SET @V_STEP_ID = 20
		SET @V_STEP_NAME = 'INSERT NEW ICS COMMITED DATA'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = @V_SYSTEMTIME
  					, @V_END_DT = NULL
  					, @V_STATUS = 'RUNNING'
  					, @V_ROWS_PROCESSED = NULL
  					, @V_ACTION = 1
  					, @V_NOTE = 'INSERT NEW ISC COMMITED DATA';

		/******************************************************************
						ISC COMMITED
		*******************************************************************/
		INSERT INTO ANALYTICSDATAMART.DBO.AD_ISC_COMMITED
				   ([AUDITVERSIONID]
				     ,[SERVICECODEDIRECTION]
					 ,[SERVICECODE]
					  ,[SELLINGROUTE]
					  ,[BUYINGROUTE]
					  ,[FROMPORT]
					  ,[TOPORT]
					  ,[TEU]
					  ,[REEFPLUGS]
					  ,[WEIGHT_MTS]
					  ,LOADDATE
		)
		SELECT	COALESCE(a.[AUDITVERSIONID], -99) as [AUDITVERSIONID]
					,a.[DepServiceDir] AS SERVICECODEDIRECTION
					,a.[SERVICECODE]
                    ,CASE WHEN [SELLINGROUTE]='' THEN NULL ELSE [SELLINGROUTE] END AS [SELLINGROUTE]
					,CASE WHEN [BUYINGROUTE]=''  THEN NULL ELSE [BUYINGROUTE] END AS [BUYINGROUTE]
					,a.[FROMPORT]
					,a.[TOPORT]
					,a.[TEU]
					,a.[REEFPLUGS]
					,a.[WEIGHT_MTS]
					,GETUTCDATE()
			FROM  [ETLREPOSITORY].[DBO].[STG_CAP_ISC_COMMITTED] a
			WHERE CASE when @V_AuditVersionID is null then 0 else AUDITVERSIONID end 
				= case when @V_AuditVersionID is null then 0 else @V_AuditVersionID end
            
		/******************************************************************
				   STORE IT INTO HISTORY TABLE FOR FUTURE REFERENCE
		*******************************************************************/
 
		INSERT INTO ANALYTICSDATAMART.DBO.AD_ISC_COMMITED_HIST
				   ([AUDITVERSIONID]
				      ,[SERVICECODEDIRECTION]
					  ,[SERVICECODE]
					  ,[SELLINGROUTE]
					  ,[BUYINGROUTE]
					  ,[FROMPORT]
					  ,[TOPORT]
					  ,[TEU]
					  ,[REEFPLUGS]
					  ,[WEIGHT_MTS]
					  ,LOADDATE
		)
		SELECT        [AUDITVERSIONID]
				      ,[SERVICECODEDIRECTION]
					  ,[SERVICECODE]
					  ,[SELLINGROUTE]
					  ,[BUYINGROUTE]
					  ,[FROMPORT]
					  ,[TOPORT]
					  ,[TEU]
					  ,[REEFPLUGS]
					  ,[WEIGHT_MTS]
					  ,LOADDATE		        
			FROM  ANALYTICSDATAMART.DBO.AD_ISC_COMMITED

		SET @V_RECORD_CNT = @@ROWCOUNT
		SET @V_SYSTEMTIME = SYSDATETIME()
			
		--UPDATE DETAIL 
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = NULL
  					, @V_END_DT = @V_SYSTEMTIME
  					, @V_STATUS = 'COMPLETED'
  					, @V_ROWS_PROCESSED = @V_RECORD_CNT
  					, @V_ACTION = 2
  					, @V_NOTE = NULL;

		SET @V_STEP_ID = 30
		SET @V_STEP_NAME = 'BUILD LEGS FOR ISC COMMITED'
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = @V_SYSTEMTIME
  					, @V_END_DT = NULL
  					, @V_STATUS = 'RUNNING'
  					, @V_ROWS_PROCESSED = NULL
  					, @V_ACTION = 1
  					, @V_NOTE =  'BUILD LEGS FOR ISC COMMITED'

	    SELECT * 
		INTO #TMP_COMMITED_SCHEDULE
		FROM 
		(
		SELECT 
				DISTINCT X.VesselCode,
				X.DepVoyage, 
				Y.* 
		FROM ANALYTICSDATAMART.DBO.SCHEDULE X
		INNER JOIN
		Analyticsdatamart.DBO.AD_ISC_Commited Y
		ON X.DEPSERVICECODE=Y.SERVICECODE
		AND X.DEPSERVICEDIR=Y.SERVICECODEDIRECTION
		AND (X.SITE_CODE=Y.FROMPORT OR X.SITE_CODE=Y.TOPORT)
		AND  DEP_STAT<>'OMIT'
		) X;
		
		SELECT 
				 A.VESSELCODE
                 ,A.DEPVOYAGE AS DEPVOYAGE
                 ,B.SERVICECODE
                 ,A.FROMPORT
				 ,MIN(B.SCHEDULEID)  AS FIRSTSCHEDULEID
        INTO #TMP_MIN_SEQ
        FROM #TMP_COMMITED_SCHEDULE A
        INNER JOIN ANALYTICSDATAMART.DBO.ROUTELEGS_SCHEDULE B
        ON A.VESSELCODE = B.VESSELCODE
        AND A.DEPVOYAGE = B.VOYAGE
        AND A.SERVICECODE = B.SERVICECODE
		AND A.SERVICECODEDIRECTION=B.SERVICECODEDIRECTION
        AND LEFT(A.FROMPORT,5) = LEFT(B.DEPARTUREPORT,5)
        GROUP BY A.VESSELCODE
                 ,A.DEPVOYAGE
		         ,B.SERVICECODE
				 ,A.FROMPORT;
				  
		SELECT
				 GG.VESSELCODE
                 ,GG.DEPVOYAGE
				 ,GG.SERVICECODE
                 ,GG.FROMPORT
                 ,A.TOPORT
                 ,GG.FIRSTSCHEDULEID
                 ,MIN(B.SCHEDULEID) AS LASTSCHEDULEID
        INTO #TMP_ROUTE_SEQ
        FROM #TMP_COMMITED_SCHEDULE A
        INNER JOIN #TMP_MIN_SEQ GG
		ON A.VESSELCODE = GG.VESSELCODE
		AND A.SERVICECODE = GG.SERVICECODE
        AND (A.DEPVOYAGE = GG.DEPVOYAGE)
        AND A.FROMPORT = GG.FROMPORT
		INNER JOIN ANALYTICSDATAMART.DBO.ROUTELEGS_SCHEDULE B
        ON A.VESSELCODE = B.VESSELCODE
        AND A.SERVICECODE = B.SERVICECODE
        AND GG.SERVICECODE = B.SERVICECODE
		AND LEFT(A.TOPORT,5) = LEFT(B.ARRIVALPORT,5)
        AND B.SCHEDULEID >= GG.FIRSTSCHEDULEID
        GROUP BY GG.VESSELCODE
                 ,GG.DEPVOYAGE
                 ,GG.SERVICECODE
                 ,GG.FROMPORT
                 ,A.TOPORT
                 ,GG.FIRSTSCHEDULEID
				 
		

		/* ASSIGN MIN AND MAX SCHEDULE IDs TO RESPECTIVE SEGMENTS*/
		IF OBJECT_ID('ANALYTICSDATAMART.DBO.AD_ISC_ID_TOSEGMENTS', 'U') IS NOT NULL
		DROP TABLE ANALYTICSDATAMART.DBO.AD_ISC_ID_TOSEGMENTS;
        SELECT  
		          L.*
                  ,LL.FIRSTSCHEDULEID
                  ,LL.LASTSCHEDULEID
        INTO ANALYTICSDATAMART.DBO.AD_ISC_ID_TOSEGMENTS
        FROM #TMP_COMMITED_SCHEDULE L
        INNER JOIN #TMP_ROUTE_SEQ LL
        ON L.VESSELCODE = LL.VESSELCODE
        AND L.DEPVOYAGE = LL.DEPVOYAGE
        AND L.SERVICECODE = LL.SERVICECODE
		AND L.FROMPORT = LL.FROMPORT
        AND L.TOPORT = LL.TOPORT;

        /*USING THE SCHEDULE ASSIGN LEGS TO SEGMENTS*/		
		IF OBJECT_ID('ANALYTICSDATAMART.DBO.AD_ISC_lEGS_TOSEGMENTS', 'U') IS NOT NULL
		DROP TABLE ANALYTICSDATAMART.DBO.AD_ISC_lEGS_TOSEGMENTS;	
		
		SELECT   DISTINCT 
                   L.VESSELCODE
                   ,L.SERVICECODE
                   ,L.SELLINGROUTE
                   ,L.BUYINGROUTE
                   ,L.FROMPORT
                   ,L.TOPORT
                   ,L.TEU
                   ,L.WEIGHT_MTS
                   ,L.REEFPLUGS
                   ,R.VOYAGE AS VOYAGE
                   ,R.ARRVOYAGE
                   ,R.SCHEDULEID
                   ,R.DEPARTUREPORT
                   ,R.ARRIVALPORT
                   ,R.SCHARRIVALDATE AS ARRIVALDATE
                   ,R.LEGSEQID
                   ,R.[ORIGINAL_ETD]
                   ,R.[ACTUAL_ETD]
                   ,L.SERVICECODEDIRECTION                               
					INTO ANALYTICSDATAMART.DBO.AD_ISC_lEGS_TOSEGMENTS
		FROM ANALYTICSDATAMART.DBO.AD_ISC_ID_TOSEGMENTS L 
        INNER JOIN ANALYTICSDATAMART.DBO.ROUTELEGS_SCHEDULE R 
        ON ISNULL(LTRIM(RTRIM(L.SERVICECODE)),0) = ISNULL(LTRIM(RTRIM(R.SERVICECODE)),0)
		AND ISNULL(LTRIM(RTRIM(L.SERVICECODEDIRECTION)),0) = ISNULL(LTRIM(RTRIM(R.SERVICECODEDIRECTION)),0)
		AND ISNULL(LTRIM(RTRIM(L.VESSELCODE)),0) = ISNULL(LTRIM(RTRIM(R.VESSELCODE)),0)
        AND R.SCHEDULEID BETWEEN L.FIRSTSCHEDULEID AND L.LASTSCHEDULEID;

		/*SUM UP TEU,TON,PLUG AND BUILD THE FINAL TABLE*/			
        
		IF OBJECT_ID('ANALYTICSDATAMART.DBO.AD_ISC_COMMITED_LEGS', 'U') IS NOT NULL
		DROP TABLE ANALYTICSDATAMART.DBO.AD_ISC_COMMITED_LEGS;		
		SELECT 
		          VESSELCODE
         		  ,VOYAGE
                  ,SERVICECODE
				  ,DEPARTUREPORT
                  ,ARRIVALPORT
				  ,ARRIVALDATE
				  ,LEGSEQID
				  ,ORIGINAL_ETD AS DEPARTUREDATE 
				  ,ACTUAL_ETD
				  ,SERVICECODEDIRECTION
				  ,SELLINGROUTE
                  ,BUYINGROUTE
				  ,SUM(TEU) AS TEU
                  ,SUM(WEIGHT_MTS) AS WEIGHT_MTS
                  ,SUM(REEFPLUGS) AS REEFPLUGS
		INTO ANALYTICSDATAMART.DBO.AD_ISC_COMMITED_LEGS
		FROM ANALYTICSDATAMART.DBO.AD_ISC_lEGS_TOSEGMENTS
		GROUP BY 
				  VESSELCODE
     			  ,VOYAGE
                  ,SERVICECODE
				  ,DEPARTUREPORT
                  ,ARRIVALPORT
	     		  ,ARRIVALDATE
				  ,LEGSEQID
				  ,ORIGINAL_ETD 
				  ,ACTUAL_ETD
				  ,SERVICECODEDIRECTION
				  ,SELLINGROUTE
                  ,BUYINGROUTE;	


		SET @V_RECORD_CNT = @@ROWCOUNT
		SET @V_SYSTEMTIME = SYSDATETIME()

		
		CREATE CLUSTERED INDEX CDX_AD_ISC_COMMITED_LEGS ON ANALYTICSDATAMART.DBO.AD_ISC_COMMITED_LEGS(VESSELCODE,VOYAGE,SERVICECODE,SERVICECODEDIRECTION)
					
					
		-----------------------------------------------------------------------
		 --Delete processed data from staging table 
		-----------------------------------------------------------------------
		SET @V_STEP_ID = 40
		SET @V_STEP_NAME = 'Delete processed data from staging table'
		SET @V_NOTE = 'Delete processed data from staging table'
		EXEC dbo.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
					, @V_STEP_ID = @V_STEP_ID
					, @V_STEP_NAME = @V_STEP_NAME
					, @V_START_DT = @V_SYSTEMTIME
					, @V_END_DT = NULL
					, @V_STATUS = 'RUNNING'
					, @V_ROWS_PROCESSED = NULL
					, @V_ACTION = 1
					, @V_NOTE = @V_NOTE;

		Delete from [ETLREPOSITORY].[DBO].[STG_CAP_ISC_COMMITTED]
		Where AuditVersionID = @v_AuditVersionID
		-----------------------------------------------------------------------
		--UPDATE DETAIL 
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = NULL
  					, @V_END_DT = @V_SYSTEMTIME
  					, @V_STATUS = 'COMPLETED'
  					, @V_ROWS_PROCESSED = @V_RECORD_CNT
  					, @V_ACTION = 2
  					, @V_NOTE = NULL;

		--UPDATE PROCESS --COMPLETE PROCESS
		EXEC DBO.USP_LOG_PROCESS @V_PROCESS_ID = @V_PROCESS_ID
							, @V_PROCESS_NAME = @V_PROCESS_NAME
							, @V_USER_NAME = @V_SYSTEM_USER
							, @V_START_DT = NULL
							, @V_END_DT = @V_SYSTEMTIME
							, @V_STATUS = 'COMPLETED'
							, @V_ACTION = 2
							, @V_PARENT_PROCESS_ID = NULL
							, @V_NOTE = NULL
							, @V_START_STEP = 1;

		SET @V_ERROR_CODE = 0
		RETURN @V_ERROR_CODE
	END TRY
	BEGIN CATCH
		SET @V_ERRORMESSAGE = 'PROCESS TO REFRESH ICS COMMITED DATA FAILED: ' + ERROR_MESSAGE()
		SET @V_ERRORSEVERITY = ERROR_SEVERITY()  
		SET @V_SYSTEMTIME = GETUTCDATE()
		SET @v_ERRORSTATE = ERROR_STATE()

		--UPDATE DETAIL 
		EXEC DBO.USP_LOG_PROCESS_DETAIL @V_PROCESS_ID = @V_PROCESS_ID
  					, @V_STEP_ID = @V_STEP_ID
  					, @V_STEP_NAME = @V_STEP_NAME
  					, @V_START_DT = NULL
  					, @V_END_DT = @V_SYSTEMTIME
  					, @V_STATUS = 'FAILED'
  					, @V_ROWS_PROCESSED = NULL
  					, @V_ACTION = 2
  					, @V_NOTE = @V_ERRORMESSAGE;

		--UPDATE PROCESS --COMPLETE PROCESS
		EXEC DBO.USP_LOG_PROCESS @V_PROCESS_ID = @V_PROCESS_ID
							, @V_PROCESS_NAME = @V_PROCESS_NAME
							, @V_USER_NAME = @V_SYSTEM_USER
							, @V_START_DT = NULL
							, @V_END_DT = @V_SYSTEMTIME
							, @V_STATUS = 'FAILED'
							, @V_ACTION = 2
							, @V_PARENT_PROCESS_ID = NULL
							, @V_NOTE =  @V_ERRORMESSAGE
							, @V_START_STEP = 1;  

		--SET @V_ERROR_CODE = -1
		--RETURN @V_ERROR_CODE
		RAISERROR(@V_ERRORMESSAGE,@V_ERRORSEVERITY,@v_ERRORSTATE)
	END CATCH
END
	








GO